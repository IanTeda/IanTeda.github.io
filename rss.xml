<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.0.1">Jekyll</generator><link href="/rss.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-01-18T12:02:07+11:00</updated><id>/</id><title>Ian Teda</title><subtitle>Husband, Father, Engineer, Explorer &amp; Creator</subtitle><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><entry><title>Why use Jekyll Website Generator</title><link href="/programming/why-jekyll-website.html" rel="alternate" type="text/html" title="Why use Jekyll Website Generator" /><published>2016-01-17T00:00:00+11:00</published><updated>2016-01-17T00:00:00+11:00</updated><id>/programming/why-jekyll-website</id><content type="html" xml:base="/programming/why-jekyll-website.html">&lt;p&gt;I chose to use Jekyll&lt;/p&gt;</content><category term="programming" /><category term="jekyll" /><summary>I chose to use Jekyll</summary></entry><entry><title>Using Gulp with Jekyll</title><link href="/programming/gulp-for-jekyll.html" rel="alternate" type="text/html" title="Using Gulp with Jekyll" /><published>2016-01-15T00:00:00+11:00</published><updated>2016-01-15T00:00:00+11:00</updated><id>/programming/gulp-for-jekyll</id><content type="html" xml:base="/programming/gulp-for-jekyll.html">&lt;h3&gt;Structure&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Development&lt;/li&gt;
&lt;li&gt;Build&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Development&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Images

&lt;ul&gt;
&lt;li&gt;Copy images from source to temporary folder for serve, but only those changed or new&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Scripts

&lt;ul&gt;
&lt;li&gt;Concatinate&lt;/li&gt;
&lt;li&gt;Sourcemaps&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Styles

&lt;ul&gt;
&lt;li&gt;Concatinate&lt;/li&gt;
&lt;li&gt;Sourcemaps&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Inject

&lt;ul&gt;
&lt;li&gt;Styles&lt;/li&gt;
&lt;li&gt;Scripts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fonts

&lt;ul&gt;
&lt;li&gt;Copy&lt;/li&gt;
&lt;li&gt;Flatten folder structure&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Images Task&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * IMAGES
 * Lazy load gulp plugins using gulp-load-plugins and attaches them variable $.
 * Copy changed files into .tmp folder
 * --prod optimises images with imagemin
 */

var gulp = require(&amp;#39;gulp&amp;#39;);
var argv = require(&amp;#39;yargs&amp;#39;).argv;
var $ = require(&amp;#39;gulp-load-plugins&amp;#39;)({
  pattern: [&amp;#39;gulp-*&amp;#39;, &amp;#39;gulp.*&amp;#39;, &amp;#39;del&amp;#39;],
    lazy: true
});

/**
 * CONFIG
 */
var images = require(&amp;#39;../gulp-config&amp;#39;).images;
var imagemin = require(&amp;#39;../gulp-config&amp;#39;).imagemin;

 /**
  * IMAGES TASK
  */
gulp.task(&amp;#39;images&amp;#39;, function () {
  return gulp.src(images.src)
        .pipe($.if(!argv.prod, $.changed(images.dest)))
        .pipe($.size({title: &amp;#39;Images:&amp;#39;}))
    .pipe($.if(argv.prod, $.cache($.imagemin(imagemin.options))))
    .pipe($.if(argv.prod, $.size({title: &amp;#39;Optimised:&amp;#39;})))
        .pipe(gulp.dest(images.dest));
})
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h5&gt;Scripts Task&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * SCRIPTS
 * Lazy load gulp plugins using gulp-load-plugins and attaches them variable $.
 * Create a sourcemap of each javascript file, concatinate, ungilify
 * --prod will skip the sourcemaps, uglify (minimise), add a min suffix and create a gziped copy
 */

var gulp = require(&amp;#39;gulp&amp;#39;);
var argv = require(&amp;#39;yargs&amp;#39;).argv;
var $ = require(&amp;#39;gulp-load-plugins&amp;#39;)({
  pattern: [&amp;#39;gulp-*&amp;#39;, &amp;#39;gulp.*&amp;#39;, &amp;#39;del&amp;#39;],
    lazy: true
});

/**
 * CONFIG
 */
var scripts = require(&amp;#39;../gulp-config&amp;#39;).scripts;
var uglify = require(&amp;#39;../gulp-config&amp;#39;).uglify;
var gzip = require(&amp;#39;../gulp-config&amp;#39;).gzip;

gulp.task(&amp;#39;scripts&amp;#39;, function (){
  return gulp.src(scripts.src)
    .pipe($.if(!argv.prod, $.sourcemaps.init()))
    .pipe($.concat(scripts.filename))
    .pipe($.size({title: &amp;#39;Concatinated:&amp;#39;}))
    .pipe($.if(!argv.prod, $.sourcemaps.write(&amp;#39;./&amp;#39;)))
    .pipe($.if(argv.prod, $.uglify(uglify.options)))
    .pipe($.if(argv.prod, $.rename({suffix: &amp;#39;.min&amp;#39;})))
    .pipe($.if(argv.prod, $.size({title: &amp;#39;Uglified:&amp;#39;})))
    .pipe($.if(argv.prod, gulp.dest(scripts.dest)))
    .pipe($.if(argv.prod, $.gzip(gzip.options)))
    .pipe($.if(argv.prod, $.size({title: &amp;#39;GZiped:&amp;#39;})))
    .pipe(gulp.dest(scripts.dest));
})
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h5&gt;Inject&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * INJECT
 * Lazy load gulp plugins using gulp-load-plugins and attach them variable $.
 * Inject styles and scripts into include files, ignoring the .tmp/ folder in path
 */

/**
 * REQUIRES
 */
var gulp = require(&amp;#39;gulp&amp;#39;);
var $ = require(&amp;#39;gulp-load-plugins&amp;#39;)({
  pattern: [&amp;#39;gulp-*&amp;#39;, &amp;#39;gulp.*&amp;#39;, &amp;#39;del&amp;#39;],
 lazy: true
});

/**
 * CONFIG
 */
var inject = require(&amp;#39;../gulp-config&amp;#39;).inject;
var scripts = require(&amp;#39;../gulp-config&amp;#39;).scripts;
var styles = require(&amp;#39;../gulp-config&amp;#39;).styles;


/**
 * INJECT STYLE SHEETS
 * Inject style sheet reference into _includes/styles.html
 */
gulp.task(&amp;#39;inject:styles&amp;#39;, function () {
  return gulp.src(styles.inject.target)
    .pipe($.inject(gulp.src(styles.inject.files, inject.options), {
      ignorePath: &amp;#39;.tmp/&amp;#39;,
    }))
    .pipe(gulp.dest(styles.inject.dest));
});


/**
 * INJECT SCRIPTS
 * Inject javascript reference into _includes/scripts.html
 */
gulp.task(&amp;#39;inject:scripts&amp;#39;, function () {
  return gulp.src(scripts.inject.target)
    .pipe($.inject(gulp.src(scripts.inject.files, {
      read: false
    }), {
      ignorePath: &amp;#39;.tmp/&amp;#39;,
    }))
    .pipe(gulp.dest(scripts.inject.dest));
});

/**
 * INJECT
 */
gulp.task(&amp;#39;inject&amp;#39;, gulp.parallel(&amp;#39;inject:styles&amp;#39;, &amp;#39;inject:scripts&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h5&gt;Html&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * HTML
 * Lazy load gulp plugins using gulp-load-plugins and attach them variable $.
 * Default the task do not do anything
 * --prod will uglify (minimise) html files and create a gziped copy
 */

/**
 * REQUIRES
 */
var gulp = require(&amp;#39;gulp&amp;#39;);
var argv = require(&amp;#39;yargs&amp;#39;).argv;
var $ = require(&amp;#39;gulp-load-plugins&amp;#39;)({
  pattern: [&amp;#39;gulp-*&amp;#39;, &amp;#39;gulp.*&amp;#39;, &amp;#39;del&amp;#39;]
});

/**
 * CONFIG
 */
var html = require(&amp;#39;../gulp-config&amp;#39;).html;
var gzip = require(&amp;#39;../gulp-config&amp;#39;).gzip;
var htmlmin = require(&amp;#39;../gulp-config&amp;#39;).htmlmin;

/**
 * OPTIMISE HTML
 */
gulp.task(&amp;#39;html&amp;#39;, function() {
  return gulp.src(html.optimise)
    .pipe($.if(argv.prod, $.size({title: &amp;#39;Html:&amp;#39;})))
    .pipe($.if(argv.prod, $.htmlmin(htmlmin.options)))
    .pipe($.if(argv.prod, $.size({title: &amp;#39;Minimised:&amp;#39;})))
    .pipe($.if(argv.prod, gulp.dest(html.dest)))
    .pipe($.if(argv.prod, $.gzip(gzip.options)))
    .pipe($.if(argv.prod, $.size({title: &amp;#39;GZiped:&amp;#39;})))
    .pipe($.if(argv.prod, gulp.dest(html.dest)));
});
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h5&gt;Fonts&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * FONTS
 * Lazy load gulp plugins using gulp-load-plugins and attach them variable $.
 * Collect all fonts and copy only changed fonts into assets fonts folder, flattening any folder hierarchy
 * --prod will do the same as above
 */

/**
 * REQUIRES
 */
var gulp = require(&amp;#39;gulp&amp;#39;);
var $ = require(&amp;#39;gulp-load-plugins&amp;#39;)({
  pattern: [&amp;#39;gulp-*&amp;#39;, &amp;#39;gulp.*&amp;#39;, &amp;#39;del&amp;#39;]
});

/**
 * CONFIG
 */
var fonts = require(&amp;#39;../gulp-config&amp;#39;).fonts;

/**
 * COPY FONTS
 * Flatten folder structure
 * Copy only fonts that have changed into destination folder
 */
gulp.task(&amp;#39;fonts&amp;#39;, function () {
  return gulp.src(fonts.src)
    .pipe($.changed(fonts.dest))
    .pipe($.flatten())
    .pipe(gulp.dest(fonts.dest))
    .pipe($.size({
      title: &amp;#39;Fonts size:&amp;#39;,
      showFiles: false
    }));
});
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h5&gt;Browser Sync&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * BROWSERSYNC
 * Start browsersync
 * --prod will start browsersync from build directory only
 */

/**
 * REQUIRES
 */
var gulp = require(&amp;#39;gulp&amp;#39;);
var argv = require(&amp;#39;yargs&amp;#39;).argv;
var browsersync = require(&amp;#39;browser-sync&amp;#39;);
var reload = browsersync.reload;


/**
 * BROWSERSYNC
 */
gulp.task(&amp;#39;browsersync&amp;#39;, function() {

  if (argv.prod){
    var baseDir = [&amp;#39;build&amp;#39;];
  } else {
    var baseDir = [&amp;#39;.tmp&amp;#39;, &amp;#39;build&amp;#39;];
  }

  browsersync({
    server: {
      baseDir: baseDir
    }
  });

  // Watch files for changes and do the needful
  gulp.watch([&amp;#39;src/**/*.md&amp;#39;, &amp;#39;src/**/*.html&amp;#39;, &amp;#39;src/**/*.yml&amp;#39;], gulp.series(&amp;#39;jekyll&amp;#39;, reload));
  gulp.watch([&amp;#39;src/**/*.xml&amp;#39;, &amp;#39;src/**/*.txt&amp;#39;], gulp.series(&amp;#39;jekyll&amp;#39;, reload));
  gulp.watch(&amp;#39;src/assets/scripts/**/*.js&amp;#39;, gulp.series(&amp;#39;scripts&amp;#39;, reload));
  gulp.watch([&amp;#39;src/assets/scss/**/*.scss&amp;#39;, &amp;#39;src/assets/styles/**/*.css&amp;#39;], gulp.series(&amp;#39;styles&amp;#39;, reload));
  gulp.watch(&amp;#39;src/assets/images/**/*&amp;#39;, gulp.series(&amp;#39;images&amp;#39;, reload));
});
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h5&gt;Github Pages&lt;/h5&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
 * GITHUB PAGES
 * Deploy generated pages to Github
 */

/**
 * CONFIG
 */
var gulp = require(&amp;#39;gulp&amp;#39;);
var ghPages = require(&amp;#39;gulp-gh-pages&amp;#39;);

/**
 * CONFIG
 */
var jekyll = require(&amp;#39;../gulp-config&amp;#39;).jekyll;

/**
 * GITHUB PAGES
 */
gulp.task(&amp;#39;gh-pages&amp;#39;, function() {
  return gulp.src(jekyll.deploy)
    .pipe(ghPages({
      branch: &amp;#39;master&amp;#39;
    }));
});
&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;h3&gt;Production&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Images

&lt;ul&gt;
&lt;li&gt;Clean: Clean temporary folder of images&lt;/li&gt;
&lt;li&gt;Copy: Copy images from source to temporary folder for serve&lt;/li&gt;
&lt;li&gt;Watch: Watch image folder for changes and copy changed images to temporary folder&lt;/li&gt;
&lt;li&gt;Optimise: Optimise images in temporary folder&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming" /><category term="gulp" /><category term="jekyll" /><summary>Structure


Development
Build
Deployment


Development


Images


Copy images from source to temporary folder for serve, but only those changed or new

Scripts


Concatinate
Sourcemaps

Styles


Concatinate
Sourcemaps

Inject


Styles
Scripts

Fonts


Copy
Flatten folder structure



Images Task
/**
 * IMAGES
 * Lazy load gulp plugins using gulp-load-plugins and attaches them variable $.
 * Copy changed files into .tmp folder
 * --prod optimises images with imagemin
 */

var gulp = require(&amp;#39;gulp&amp;#39;);
var argv = require(&amp;#39;yargs&amp;#39;).argv;
var $ = require(&amp;#39;gulp-load-plugins&amp;#39;)({
  pattern: [&amp;#39;gulp-*&amp;#39;, &amp;#39;gulp.*&amp;#39;, &amp;#39;del&amp;#39;],
    lazy: true
});

/**
 * CONFIG
 */
var images = require(&amp;#39;../gulp-config&amp;#39;).images;
var imagemin = require(&amp;#39;../gulp-config&amp;#39;).imagemin;

 /**
  * IMAGES TASK
  */
gulp.task(&amp;#39;images&amp;#39;, function () {
  return gulp.src(images.src)
        .pipe($.if(!argv.prod, $.changed(images.dest)))
        .pipe($.size({title: &amp;#39;Images:&amp;#39;}))
    .pipe($.if(argv.prod, $.cache($.imagemin(imagemin.options))))
    .pipe($.if(argv.prod, $.size({title: &amp;#39;Optimised:&amp;#39;})))
        .pipe(gulp.dest(images.dest));
})

Scripts Task
/**
 * SCRIPTS
 * Lazy load gulp plugins using gulp-load-plugins and attaches them variable $.
 * Create a sourcemap of each javascript file, concatinate, ungilify
 * --prod will skip the sourcemaps, uglify (minimise), add a min suffix and create a gziped copy
 */

var gulp = require(&amp;#39;gulp&amp;#39;);
var argv = require(&amp;#39;yargs&amp;#39;).argv;
var $ = require(&amp;#39;gulp-load-plugins&amp;#39;)({
  pattern: [&amp;#39;gulp-*&amp;#39;, &amp;#39;gulp.*&amp;#39;, &amp;#39;del&amp;#39;],
    lazy: true
});

/**
 * CONFIG
 */
var scripts = require(&amp;#39;../gulp-config&amp;#39;).scripts;
var uglify = require(&amp;#39;../gulp-config&amp;#39;).uglify;
var gzip = require(&amp;#39;../gulp-config&amp;#39;).gzip;

gulp.task(&amp;#39;scripts&amp;#39;, function (){
  return gulp.src(scripts.src)
    .pipe($.if(!argv.prod, $.sourcemaps.init()))
    .pipe($.concat(scripts.filename))
    .pipe($.size({title: &amp;#39;Concatinated:&amp;#39;}))
    .pipe($.if(!argv.prod, $.sourcemaps.write(&amp;#39;./&amp;#39;)))
    .pipe($.if(argv.prod, $.uglify(uglify.options)))
    .pipe($.if(argv.prod, $.rename({suffix: &amp;#39;.min&amp;#39;})))
    .pipe($.if(argv.prod, $.size({title: &amp;#39;Uglified:&amp;#39;})))
    .pipe($.if(argv.prod, gulp.dest(scripts.dest)))
    .pipe($.if(argv.prod, $.gzip(gzip.options)))
    .pipe($.if(argv.prod, $.size({title: &amp;#39;GZiped:&amp;#39;})))
    .pipe(gulp.dest(scripts.dest));
})

Inject
/**
 * INJECT
 * Lazy load gulp plugins using gulp-load-plugins and attach them variable $.
 * Inject styles and scripts into include files, ignoring the .tmp/ folder in path
 */

/**
 * REQUIRES
 */
var gulp = require(&amp;#39;gulp&amp;#39;);
var $ = require(&amp;#39;gulp-load-plugins&amp;#39;)({
  pattern: [&amp;#39;gulp-*&amp;#39;, &amp;#39;gulp.*&amp;#39;, &amp;#39;del&amp;#39;],
 lazy: true
});

/**
 * CONFIG
 */
var inject = require(&amp;#39;../gulp-config&amp;#39;).inject;
var scripts = require(&amp;#39;../gulp-config&amp;#39;).scripts;
var styles = require(&amp;#39;../gulp-config&amp;#39;).styles;


/**
 * INJECT STYLE SHEETS
 * Inject style sheet reference into _includes/styles.html
 */
gulp.task(&amp;#39;inject:styles&amp;#39;, function () {
  return gulp.src(styles.inject.target)
    .pipe($.inject(gulp.src(styles.inject.files, inject.options), {
      ignorePath: &amp;#39;.tmp/&amp;#39;,
    }))
    .pipe(gulp.dest(styles.inject.dest));
});


/**
 * INJECT SCRIPTS
 * Inject javascript reference into _includes/scripts.html
 */
gulp.task(&amp;#39;inject:scripts&amp;#39;, function () {
  return gulp.src(scripts.inject.target)
    .pipe($.inject(gulp.src(scripts.inject.files, {
      read: false
    }), {
      ignorePath: &amp;#39;.tmp/&amp;#39;,
    }))
    .pipe(gulp.dest(scripts.inject.dest));
});

/**
 * INJECT
 */
gulp.task(&amp;#39;inject&amp;#39;, gulp.parallel(&amp;#39;inject:styles&amp;#39;, &amp;#39;inject:scripts&amp;#39;));

Html
/**
 * HTML
 * Lazy load gulp plugins using gulp-load-plugins and attach them variable $.
 * Default the task do not do anything
 * --prod will uglify (minimise) html files and create a gziped copy
 */

/**
 * REQUIRES
 */
var gulp = require(&amp;#39;gulp&amp;#39;);
var argv = require(&amp;#39;yargs&amp;#39;).argv;
var $ = require(&amp;#39;gulp-load-plugins&amp;#39;)({
  pattern: [&amp;#39;gulp-*&amp;#39;, &amp;#39;gulp.*&amp;#39;, &amp;#39;del&amp;#39;]
});

/**
 * CONFIG
 */
var html = require(&amp;#39;../gulp-config&amp;#39;).html;
var gzip = require(&amp;#39;../gulp-config&amp;#39;).gzip;
var htmlmin = require(&amp;#39;../gulp-config&amp;#39;).htmlmin;

/**
 * OPTIMISE HTML
 */
gulp.task(&amp;#39;html&amp;#39;, function() {
  return gulp.src(html.optimise)
    .pipe($.if(argv.prod, $.size({title: &amp;#39;Html:&amp;#39;})))
    .pipe($.if(argv.prod, $.htmlmin(htmlmin.options)))
    .pipe($.if(argv.prod, $.size({title: &amp;#39;Minimised:&amp;#39;})))
    .pipe($.if(argv.prod, gulp.dest(html.dest)))
    .pipe($.if(argv.prod, $.gzip(gzip.options)))
    .pipe($.if(argv.prod, $.size({title: &amp;#39;GZiped:&amp;#39;})))
    .pipe($.if(argv.prod, gulp.dest(html.dest)));
});

Fonts
/**
 * FONTS
 * Lazy load gulp plugins using gulp-load-plugins and attach them variable $.
 * Collect all fonts and copy only changed fonts into assets fonts folder, flattening any folder hierarchy
 * --prod will do the same as above
 */

/**
 * REQUIRES
 */
var gulp = require(&amp;#39;gulp&amp;#39;);
var $ = require(&amp;#39;gulp-load-plugins&amp;#39;)({
  pattern: [&amp;#39;gulp-*&amp;#39;, &amp;#39;gulp.*&amp;#39;, &amp;#39;del&amp;#39;]
});

/**
 * CONFIG
 */
var fonts = require(&amp;#39;../gulp-config&amp;#39;).fonts;

/**
 * COPY FONTS
 * Flatten folder structure
 * Copy only fonts that have changed into destination folder
 */
gulp.task(&amp;#39;fonts&amp;#39;, function () {
  return gulp.src(fonts.src)
    .pipe($.changed(fonts.dest))
    .pipe($.flatten())
    .pipe(gulp.dest(fonts.dest))
    .pipe($.size({
      title: &amp;#39;Fonts size:&amp;#39;,
      showFiles: false
    }));
});

Browser Sync
/**
 * BROWSERSYNC
 * Start browsersync
 * --prod will start browsersync from build directory only
 */

/**
 * REQUIRES
 */
var gulp = require(&amp;#39;gulp&amp;#39;);
var argv = require(&amp;#39;yargs&amp;#39;).argv;
var browsersync = require(&amp;#39;browser-sync&amp;#39;);
var reload = browsersync.reload;


/**
 * BROWSERSYNC
 */
gulp.task(&amp;#39;browsersync&amp;#39;, function() {

  if (argv.prod){
    var baseDir = [&amp;#39;build&amp;#39;];
  } else {
    var baseDir = [&amp;#39;.tmp&amp;#39;, &amp;#39;build&amp;#39;];
  }

  browsersync({
    server: {
      baseDir: baseDir
    }
  });

  // Watch files for changes and do the needful
  gulp.watch([&amp;#39;src/**/*.md&amp;#39;, &amp;#39;src/**/*.html&amp;#39;, &amp;#39;src/**/*.yml&amp;#39;], gulp.series(&amp;#39;jekyll&amp;#39;, reload));
  gulp.watch([&amp;#39;src/**/*.xml&amp;#39;, &amp;#39;src/**/*.txt&amp;#39;], gulp.series(&amp;#39;jekyll&amp;#39;, reload));
  gulp.watch(&amp;#39;src/assets/scripts/**/*.js&amp;#39;, gulp.series(&amp;#39;scripts&amp;#39;, reload));
  gulp.watch([&amp;#39;src/assets/scss/**/*.scss&amp;#39;, &amp;#39;src/assets/styles/**/*.css&amp;#39;], gulp.series(&amp;#39;styles&amp;#39;, reload));
  gulp.watch(&amp;#39;src/assets/images/**/*&amp;#39;, gulp.series(&amp;#39;images&amp;#39;, reload));
});

Github Pages
/**
 * GITHUB PAGES
 * Deploy generated pages to Github
 */

/**
 * CONFIG
 */
var gulp = require(&amp;#39;gulp&amp;#39;);
var ghPages = require(&amp;#39;gulp-gh-pages&amp;#39;);

/**
 * CONFIG
 */
var jekyll = require(&amp;#39;../gulp-config&amp;#39;).jekyll;

/**
 * GITHUB PAGES
 */
gulp.task(&amp;#39;gh-pages&amp;#39;, function() {
  return gulp.src(jekyll.deploy)
    .pipe(ghPages({
      branch: &amp;#39;master&amp;#39;
    }));
});

Production


Images


Clean: Clean temporary folder of images
Copy: Copy images from source to temporary folder for serve
Watch: Watch image folder for changes and copy changed images to temporary folder
Optimise: Optimise images in temporary folder</summary></entry><entry><title>A Full and Comprehensive Style Test</title><link href="/engineering/a-full-and-comprehensive-style-test.html" rel="alternate" type="text/html" title="A Full and Comprehensive Style Test" /><published>2014-09-27T20:18:00+10:00</published><updated>2014-09-27T20:18:00+10:00</updated><id>/engineering/a-full-and-comprehensive-style-test</id><content type="html" xml:base="/engineering/a-full-and-comprehensive-style-test.html">&lt;p&gt;This is just an &lt;em&gt;ipsis verbis&lt;/em&gt; copy of the first example running on the &lt;a href=&quot;http://demo.ghost.io&quot;&gt;Ghost Demo&lt;/a&gt;. This shows how you can use html styling to achieve your hopes.&lt;/p&gt;


&lt;p&gt;Below is just about everything you’ll need to style in the theme. Check the source code to see the many embedded elements within paragraphs.&lt;/p&gt;


&lt;hr /&gt;

&lt;h1 id=&quot;heading1&quot;&gt;Heading 1&lt;/h1&gt;

&lt;h2 id=&quot;heading2&quot;&gt;Heading 2&lt;/h2&gt;

&lt;h3 id=&quot;heading3&quot;&gt;Heading 3&lt;/h3&gt;

&lt;h4 id=&quot;heading4&quot;&gt;Heading 4&lt;/h4&gt;

&lt;h5 id=&quot;heading5&quot;&gt;Heading 5&lt;/h5&gt;

&lt;h6 id=&quot;heading6&quot;&gt;Heading 6&lt;/h6&gt;

&lt;hr /&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, &lt;a title=&quot;test link&quot; href=&quot;#&quot;&gt;test link&lt;/a&gt; adipiscing elit. &lt;strong&gt;This is strong.&lt;/strong&gt; Nullam dignissim convallis est. Quisque aliquam. &lt;em&gt;This is emphasized.&lt;/em&gt; Donec faucibus. Nunc iaculis suscipit dui. 5&lt;sup&gt;3&lt;/sup&gt; = 125. Water is H&lt;sub&gt;2&lt;/sub&gt;O. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. &lt;cite&gt;The New York Times&lt;/cite&gt; (That’s a citation). &lt;span style=&quot;text-decoration:underline;&quot;&gt;Underline.&lt;/span&gt; Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.&lt;/p&gt;

&lt;p&gt;&lt;abbr title=&quot;Hyper Text Markup Language&quot;&gt;HTML&lt;/abbr&gt; and &lt;abbr title=&quot;Cascading Style Sheets&quot;&gt;CSS&lt;/abbr&gt; are our tools. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.  Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus. To copy a file type &lt;code&gt;COPY &lt;var&gt;filename&lt;/var&gt;&lt;/code&gt;. &lt;del&gt;Dinner’s at 5:00.&lt;/del&gt; &lt;ins&gt;Let’s make that 7.&lt;/ins&gt; This &lt;span style=&quot;text-decoration:line-through;&quot;&gt;text&lt;/span&gt; has been struck.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;media&quot;&gt;Media&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore.&lt;/p&gt;

&lt;h3 id=&quot;bigimage&quot;&gt;Big Image&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://demo.ghost.io/content/images/2014/09/testimg1.jpeg&quot; alt=&quot;Test Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.&lt;/p&gt;

&lt;h3 id=&quot;smallimage&quot;&gt;Small Image&lt;/h3&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://demo.ghost.io/content/images/2014/09/testimg2.jpg&quot; alt=&quot;Small Test Image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Labore et dolore.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;listtypes&quot;&gt;List Types&lt;/h2&gt;

&lt;h3 id=&quot;definitionlist&quot;&gt;Definition List&lt;/h3&gt;

&lt;dl&gt;
&lt;dt&gt;Definition List Title&lt;/dt&gt;
&lt;dd&gt;This is a definition list division.&lt;/dd&gt;
&lt;dt&gt;Definition&lt;/dt&gt;
&lt;dd&gt;An exact statement or description of the nature, scope, or meaning of something: &lt;em&gt;our definition of what constitutes poetry.&lt;/em&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;orderedlist&quot;&gt;Ordered List&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;List Item 1  &lt;/li&gt;
&lt;li&gt;List Item 2 &lt;br /&gt;
&lt;ol&gt;&lt;li&gt;Nested list item A&lt;/li&gt;
&lt;li&gt;Nested list item B&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;List Item 3&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;unorderedlist&quot;&gt;Unordered List&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;List Item 1&lt;/li&gt;
&lt;li&gt;List Item 2
&lt;ul&gt;&lt;li&gt;Nested list item A&lt;/li&gt;
&lt;li&gt;Nested list item B&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;List Item 3&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;table&quot;&gt;Table&lt;/h2&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Table Header 1&lt;/th&gt;
&lt;th&gt;Table Header 2&lt;/th&gt;
&lt;th&gt;Table Header 3&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Division 1&lt;/td&gt;
&lt;td&gt;Division 2&lt;/td&gt;
&lt;td&gt;Division 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;Division 1&lt;/td&gt;
&lt;td&gt;Division 2&lt;/td&gt;
&lt;td&gt;Division 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Division 1&lt;/td&gt;
&lt;td&gt;Division 2&lt;/td&gt;
&lt;td&gt;Division 3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;preformattedtext&quot;&gt;Preformatted Text&lt;/h2&gt;

&lt;p&gt;Typographically, preformatted text is not the same thing as code. Sometimes, a faithful execution of the text requires preformatted text that may not have anything to do with code. Most browsers use Courier and that’s a good default — with one slight adjustment, Courier 10 Pitch over regular Courier for Linux users.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Code can be presented inline, like &lt;code&gt;&amp;lt;?php bloginfo(&#39;stylesheet_url&#39;); ?&amp;gt;&lt;/code&gt;, or within a &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; block. Because we have more specific typographic needs for code, we’ll specify Consolas and Monaco ahead of the browser-defined monospace font.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;#container {
    float: left;
    margin: 0 -240px 0 0;
    width: 100%;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h2&gt;

&lt;p&gt;Let’s keep it simple. Italics are good to help set it off from the body text. Be sure to style the citation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Good afternoon, gentlemen. I am a HAL 9000 computer. I became operational at the H.A.L. plant in Urbana, Illinois on the 12th of January 1992. My instructor was Mr. Langley, and he taught me to sing a song. If you’d like to hear it I can sing it for you. &lt;cite&gt;— &lt;a href=&quot;http://en.wikipedia.org/wiki/HAL_9000&quot;&gt;HAL 9000&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And here’s a bit of trailing text.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;textlevelsemantics&quot;&gt;Text-level semantics&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;#&quot;&gt;a element&lt;/a&gt; example &lt;br /&gt;
The &lt;abbr&gt;abbr element&lt;/abbr&gt; and &lt;abbr title=&quot;Title text&quot;&gt;abbr element with title&lt;/abbr&gt; examples &lt;br /&gt;
The &lt;b&gt;b element&lt;/b&gt; example &lt;br /&gt;
The &lt;cite&gt;cite element&lt;/cite&gt; example &lt;br /&gt;
The &lt;code&gt;code element&lt;/code&gt; example &lt;br /&gt;
The &lt;del&gt;del element&lt;/del&gt; example &lt;br /&gt;
The &lt;dfn&gt;dfn element&lt;/dfn&gt; and &lt;dfn title=&quot;Title text&quot;&gt;dfn element with title&lt;/dfn&gt; examples &lt;br /&gt;
The &lt;em&gt;em element&lt;/em&gt; example &lt;br /&gt;
The &lt;i&gt;i element&lt;/i&gt; example &lt;br /&gt;
The &lt;ins&gt;ins element&lt;/ins&gt; example &lt;br /&gt;
The &lt;kbd&gt;kbd element&lt;/kbd&gt; example &lt;br /&gt;
The &lt;mark&gt;mark element&lt;/mark&gt; example &lt;br /&gt;
The &lt;q&gt;q element &lt;q&gt;inside&lt;/q&gt; a q element&lt;/q&gt; example &lt;br /&gt;
The &lt;s&gt;s element&lt;/s&gt; example &lt;br /&gt;
The &lt;samp&gt;samp element&lt;/samp&gt; example &lt;br /&gt;
The &lt;small&gt;small element&lt;/small&gt; example &lt;br /&gt;
The &lt;span&gt;span element&lt;/span&gt; example &lt;br /&gt;
The &lt;strong&gt;strong element&lt;/strong&gt; example &lt;br /&gt;
The &lt;sub&gt;sub element&lt;/sub&gt; example &lt;br /&gt;
The &lt;sup&gt;sup element&lt;/sup&gt; example &lt;br /&gt;
The &lt;var&gt;var element&lt;/var&gt; example &lt;br /&gt;
The &lt;u&gt;u element&lt;/u&gt; example&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;forms&quot;&gt;Forms&lt;/h2&gt;

&lt;form&gt;
&lt;fieldset&gt;
&lt;legend&gt;Inputs as descendents of labels (form legend)&lt;/legend&gt;
&lt;label&gt;
&lt;b&gt;Text input&lt;/b&gt;
&lt;input type=&quot;text&quot; value=&quot;default value&quot;&gt;
&lt;/label&gt;
&lt;label&gt;
&lt;b&gt;Email input&lt;/b&gt;
&lt;input type=&quot;email&quot;&gt;
&lt;/label&gt;
&lt;label&gt;
&lt;b&gt;Search input&lt;/b&gt;
&lt;input type=&quot;search&quot;&gt;
&lt;/label&gt;
&lt;label&gt;
&lt;b&gt;Tel input&lt;/b&gt;
&lt;input type=&quot;tel&quot;&gt;
&lt;/label&gt;
&lt;label&gt;
&lt;b&gt;URL input&lt;/b&gt;
&lt;input type=&quot;url&quot; placeholder=&quot;http://&quot;&gt;
&lt;/label&gt;
&lt;label&gt;
&lt;b&gt;Password input&lt;/b&gt;
&lt;input type=&quot;password&quot; value=&quot;password&quot;&gt;
&lt;/label&gt;
&lt;label&gt;
&lt;b&gt;File input&lt;/b&gt;
&lt;input type=&quot;file&quot;&gt;
&lt;/label&gt;
&lt;label&gt;
&lt;b&gt;Radio input&lt;/b&gt;
&lt;input type=&quot;radio&quot; name=&quot;rad&quot;&gt;
&lt;/label&gt;
&lt;label&gt;
&lt;b&gt;Checkbox input&lt;/b&gt;
&lt;input type=&quot;checkbox&quot;&gt;
&lt;/label&gt;
&lt;label&gt;
&lt;input type=&quot;radio&quot; name=&quot;rad&quot;&gt; Radio input
&lt;/label&gt;
&lt;label&gt;
&lt;input type=&quot;checkbox&quot;&gt; Checkbox input
&lt;/label&gt;
&lt;label&gt;
&lt;b&gt;Select field&lt;/b&gt;
&lt;select&gt;
&lt;option&gt;Option 01&lt;/option&gt;
&lt;option&gt;Option 02&lt;/option&gt;
&lt;/select&gt;
&lt;/label&gt;
&lt;label&gt;
&lt;b&gt;Textarea&lt;/b&gt;
&lt;textarea cols=&quot;30&quot; rows=&quot;5&quot; &gt;Textarea text&lt;/textarea&gt;
&lt;/label&gt;
&lt;/fieldset&gt;

&lt;fieldset&gt;
&lt;legend&gt;Clickable inputs and buttons&lt;/legend&gt;
&lt;input type=&quot;image&quot; src=&quot;http://placekitten.com/90/24&quot; alt=&quot;Image (input)&quot;&gt;
&lt;input type=&quot;reset&quot; value=&quot;Reset (input)&quot;&gt;
&lt;input type=&quot;button&quot; value=&quot;Button (input)&quot;&gt;
&lt;input type=&quot;submit&quot; value=&quot;Submit (input)&quot;&gt;
&lt;button type=&quot;reset&quot;&gt;Reset (button)&lt;/button&gt;
&lt;button type=&quot;button&quot;&gt;Button (button)&lt;/button&gt;
&lt;button type=&quot;submit&quot;&gt;Submit (button)&lt;/button&gt;
&lt;/fieldset&gt;

&lt;fieldset id=&quot;boxsize&quot;&gt;
&lt;legend&gt;box-sizing tests&lt;/legend&gt;
&lt;div&gt;&lt;input type=&quot;text&quot; value=&quot;text&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;email&quot; value=&quot;email&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;search&quot; value=&quot;search&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;url&quot; value=&quot;http://example.com&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;password&quot; value=&quot;password&quot;&gt;&lt;/div&gt;

&lt;div&gt;&lt;input type=&quot;color&quot; value=&quot;#000000&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;number&quot; value=&quot;5&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;range&quot; value=&quot;10&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;date&quot; value=&quot;1970-01-01&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;month&quot; value=&quot;1970-01&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;week&quot; value=&quot;1970-W01&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;time&quot; value=&quot;18:23&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;datetime&quot; value=&quot;1970-01-01T00:00:00Z&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;datetime-local&quot; value=&quot;1970-01-01T00:00&quot;&gt;&lt;/div&gt;

&lt;div&gt;&lt;input type=&quot;radio&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;checkbox&quot;&gt;&lt;/div&gt;

&lt;div&gt;&lt;select&gt;&lt;option&gt;Option 01&lt;/option&gt;&lt;option&gt;Option 02&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;
&lt;div&gt;&lt;textarea cols=&quot;30&quot; rows=&quot;5&quot; &gt;Textarea text&lt;/textarea&gt;&lt;/div&gt;

&lt;div&gt;&lt;input type=&quot;image&quot; src=&quot;http://placekitten.com/90/24&quot; alt=&quot;Image (input)&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;reset&quot; value=&quot;Reset (input)&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;Button (input)&quot;&gt;&lt;/div&gt;
&lt;div&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit (input)&quot;&gt;&lt;/div&gt;

&lt;div&gt;&lt;button type=&quot;reset&quot;&gt;Reset (button)&lt;/button&gt;&lt;/div&gt;
&lt;div&gt;&lt;button type=&quot;button&quot;&gt;Button (button)&lt;/button&gt;&lt;/div&gt;
&lt;div&gt;&lt;button type=&quot;submit&quot;&gt;Submit (button)&lt;/button&gt;&lt;/div&gt;
&lt;/fieldset&gt;
&lt;/form&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;embeds&quot;&gt;Embeds&lt;/h2&gt;

&lt;p&gt;Sometimes all you want to do is embed a little love from another location and set your post alive.&lt;/p&gt;

&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;

&lt;p&gt;Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;

&lt;iframe src=&quot;//player.vimeo.com/video/103224792?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;600&quot; height=&quot;338&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;

&lt;h3 id=&quot;slides&quot;&gt;Slides&lt;/h3&gt;

&lt;p&gt;Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;34d2856027ce01316b5d621ab8e7d421&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;

&lt;h3 id=&quot;audio&quot;&gt;Audio&lt;/h3&gt;

&lt;p&gt;Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/169381837&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt.&lt;/p&gt;

&lt;p&gt;&lt;div data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;bcqhe&quot; data-default-tab=&quot;js&quot; data-user=&quot;rglazebrook&quot; class=&#39;codepen&#39;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var c = new Sketch.create({autoclear: false}),
    bigCircle = 50,
    littleCircle = 5,
    // The velocity value determines how much to move the spinner head (in radians).
    velocity = 0.105,
    hue = 0,
    // The alpha value below determines the length of the spinner&amp;#39;s tail.
    bg = &amp;#39;rgba(40,40,40,.075)&amp;#39;;
    Spinner = function() {};

Spinner.prototype.setup = function() {
  this.x = c.width / 2;
  this.y = c.height / 2 - bigCircle;
  this.rotation = 0;
}
Spinner.prototype.update = function() {
  this.rotation += velocity;
  this.rotation = this.rotation % TWO_PI;
  this.x = c.width /2 + cos(this.rotation) * bigCircle;
  this.y = c.height / 2 + sin(this.rotation) * bigCircle;
}
Spinner.prototype.draw = function() {
  c.fillStyle = &amp;#39;hsl(&amp;#39;+hue+&amp;#39;,50%,50%)&amp;#39;;
  c.beginPath();
  c.arc(this.x, this.y, littleCircle, 0, TWO_PI);
  c.fill();
  c.closePath();
}
c.setup = function() {
  spinner = new Spinner();
  spinner.setup();
}
c.update = function() {
  spinner.update();
  hue = ++hue % 360;
}
c.draw = function() {
  spinner.draw();
  c.fillStyle = bg;
  c.fillRect(0,0,c.width,c.height);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the Pen &lt;a href=&#39;http://codepen.io/rglazebrook/pen/bcqhe/&#39;&gt;Simple Rotating Spinner&lt;/a&gt; by Rob Glazebrook (&lt;a href=&#39;http://codepen.io/rglazebrook&#39;&gt;@rglazebrook&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;script async src=&quot;//codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Isn&#39;t it beautiful.&lt;/p&gt;</content><category term="engineering" /><category term="test" /><category term="content" /><summary>This is just an ipsis verbis copy of the first example running on the Ghost Demo. This shows how you can use html styling to achieve your hopes.


Below is just about everything you’ll need to style in the theme. Check the source code to see the many embedded elements within paragraphs.




Heading 1

Heading 2

Heading 3

Heading 4

Heading 5

Heading 6



Lorem ipsum dolor sit amet, test link adipiscing elit. This is strong. Nullam dignissim convallis est. Quisque aliquam. This is emphasized. Donec faucibus. Nunc iaculis suscipit dui. 53 = 125. Water is H2O. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. The New York Times (That’s a citation). Underline. Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.

HTML and CSS are our tools. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.  Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus. To copy a file type COPY filename. Dinner’s at 5:00. Let’s make that 7. This text has been struck.



Media

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore.

Big Image



Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.

Small Image

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore.



Labore et dolore.



List Types

Definition List


Definition List Title
This is a definition list division.
Definition
An exact statement or description of the nature, scope, or meaning of something: our definition of what constitutes poetry.


Ordered List


List Item 1  
List Item 2 
Nested list item A
Nested list item B
List Item 3


Unordered List


List Item 1
List Item 2
Nested list item A
Nested list item B
List Item 3




Table




Table Header 1
Table Header 2
Table Header 3


Division 1
Division 2
Division 3


Division 1
Division 2
Division 3


Division 1
Division 2
Division 3






Preformatted Text

Typographically, preformatted text is not the same thing as code. Sometimes, a faithful execution of the text requires preformatted text that may not have anything to do with code. Most browsers use Courier and that’s a good default — with one slight adjustment, Courier 10 Pitch over regular Courier for Linux users.

Code

Code can be presented inline, like &amp;lt;?php bloginfo(&#39;stylesheet_url&#39;); ?&amp;gt;, or within a &amp;lt;pre&amp;gt; block. Because we have more specific typographic needs for code, we’ll specify Consolas and Monaco ahead of the browser-defined monospace font.

#container {
    float: left;
    margin: 0 -240px 0 0;
    width: 100%;
}



Blockquotes

Let’s keep it simple. Italics are good to help set it off from the body text. Be sure to style the citation.


  Good afternoon, gentlemen. I am a HAL 9000 computer. I became operational at the H.A.L. plant in Urbana, Illinois on the 12th of January 1992. My instructor was Mr. Langley, and he taught me to sing a song. If you’d like to hear it I can sing it for you. — HAL 9000


And here’s a bit of trailing text.



Text-level semantics

The a element example 
The abbr element and abbr element with title examples 
The b element example 
The cite element example 
The code element example 
The del element example 
The dfn element and dfn element with title examples 
The em element example 
The i element example 
The ins element example 
The kbd element example 
The mark element example 
The q element inside a q element example 
The s element example 
The samp element example 
The small element example 
The span element example 
The strong element example 
The sub element example 
The sup element example 
The var element example 
The u element example



Forms



Inputs as descendents of labels (form legend)

Text input



Email input



Search input



Tel input



URL input



Password input



File input



Radio input



Checkbox input



 Radio input


 Checkbox input


Select field

Option 01
Option 02



Textarea
Textarea text




Clickable inputs and buttons




Reset (button)
Button (button)
Submit (button)



box-sizing tests



















Option 01Option 02
Textarea text






Reset (button)
Button (button)
Submit (button)





Embeds

Sometimes all you want to do is embed a little love from another location and set your post alive.

Video

Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.



Culpa qui officia deserunt mollit anim id est laborum.

Slides

Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.



Culpa qui officia deserunt mollit anim id est laborum.

Audio

Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.



Culpa qui officia deserunt mollit anim id est laborum.

Code

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt.



var c = new Sketch.create({autoclear: false}),
    bigCircle = 50,
    littleCircle = 5,
    // The velocity value determines how much to move the spinner head (in radians).
    velocity = 0.105,
    hue = 0,
    // The alpha value below determines the length of the spinner&amp;#39;s tail.
    bg = &amp;#39;rgba(40,40,40,.075)&amp;#39;;
    Spinner = function() {};

Spinner.prototype.setup = function() {
  this.x = c.width / 2;
  this.y = c.height / 2 - bigCircle;
  this.rotation = 0;
}
Spinner.prototype.update = function() {
  this.rotation += velocity;
  this.rotation = this.rotation % TWO_PI;
  this.x = c.width /2 + cos(this.rotation) * bigCircle;
  this.y = c.height / 2 + sin(this.rotation) * bigCircle;
}
Spinner.prototype.draw = function() {
  c.fillStyle = &amp;#39;hsl(&amp;#39;+hue+&amp;#39;,50%,50%)&amp;#39;;
  c.beginPath();
  c.arc(this.x, this.y, littleCircle, 0, TWO_PI);
  c.fill();
  c.closePath();
}
c.setup = function() {
  spinner = new Spinner();
  spinner.setup();
}
c.update = function() {
  spinner.update();
  hue = ++hue % 360;
}
c.draw = function() {
  spinner.draw();
  c.fillStyle = bg;
  c.fillRect(0,0,c.width,c.height);
}


See the Pen Simple Rotating Spinner by Rob Glazebrook (@rglazebrook) on CodePen.



Isn&#39;t it beautiful.</summary></entry><entry><title>Example content</title><link href="/creativity/example-content.html" rel="alternate" type="text/html" title="Example content" /><published>2014-03-01T00:00:00+11:00</published><updated>2014-03-01T00:00:00+11:00</updated><id>/creativity/example-content</id><content type="html" xml:base="/creativity/example-content.html">&lt;div class=&quot;message&quot;&gt; Howdy! This is an example blog post that shows several
types of HTML content supported in this theme. &lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;,
nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia
quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis
consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare
vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur
purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can
be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer
Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should
use &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
&lt;li&gt;Citations, like &lt;cite&gt;&amp;mdash; Mark otto&lt;/cite&gt;, should use &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should
use &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses
&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est
non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.
Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code&gt;code element&lt;/code&gt; montes, nascetur
ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;// Example can be run directly in your JavaScript console

// Create a function that takes two arguments and returns the sum of those
arguments var adder = new Function(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;return a + b&amp;quot;);

// Call the function
adder(2, 6);
// &amp;gt; 8&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna
mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris
condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3&gt;Gists via GitHub Pages&lt;/h3&gt;

&lt;p&gt;Vestibulum id ligula porta felis euismod semper. Nullam quis risus eget urna
mollis ornare vel eu leo. Donec sed odio dui.&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/5555251.js?file=gist.md&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.
Nullam quis risus eget urna mollis ornare vel eu leo. Cum sociis natoque
penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec sed
odio dui. Vestibulum id ligula porta felis euismod semper.&lt;/p&gt;

&lt;h3&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus
mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada
magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris
condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
&lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
&lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a
pharetra augue.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
&lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur
ridiculus mus.&lt;/li&gt;
&lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at
lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo
risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna
mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet,
consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur
est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;</content><category term="creativity" /><summary>Howdy! This is an example blog post that shows several
types of HTML content supported in this theme. 

Cum sociis natoque penatibus et magnis dis parturient montes,
nascetur ridiculus mus. Aenean eu leo quam. Pellentesque ornare sem lacinia
quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis
consectetur purus sit amet fermentum.


Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare
vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.


Etiam porta sem malesuada magna mollis euismod. Cras mattis consectetur
purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.</summary></entry></feed>
