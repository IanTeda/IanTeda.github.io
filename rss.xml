<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.0.5">Jekyll</generator><link href="https://ianteda.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://ianteda.com/" rel="alternate" type="text/html" /><updated>2016-08-27T15:44:11+10:00</updated><id>https://ianteda.com/</id><title>Ian Teda</title><subtitle>Husband, Father, Engineer, Explorer &amp; Creator</subtitle><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><entry><title>The API Design Guide</title><link href="https://ianteda.com/programming/the-api-design-guide.html" rel="alternate" type="text/html" title="The API Design Guide" /><published>2016-08-26T00:00:00+10:00</published><updated>2016-08-26T00:00:00+10:00</updated><id>https://ianteda.com/programming/the-api-design-guide</id><content type="html" xml:base="https://ianteda.com/programming/the-api-design-guide.html">&lt;blockquote&gt;
  &lt;p&gt;An API allows one piece of software talking to another piece of software&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;definitions&quot;&gt;Definitions&lt;/h3&gt;

&lt;p&gt;Some terms used in this guide and there definitions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;API&lt;/strong&gt; - Application Programming Interface, an interface for one piece of software to talk to another;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Collection&lt;/strong&gt; - A collection of resources found at an endpoint;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consumer (Client)&lt;/strong&gt; - A client computer application making requests of the API;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cURL&lt;/strong&gt; - A command line tool for getting and sending files using URL syntax;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Endpoint&lt;/strong&gt; - An API URL on a Server which represents either a Resource or a Collection;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Granularity&lt;/strong&gt; - The level of detailed returned in the request response;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTTP&lt;/strong&gt; - A protocol for communicating over networks, aka the internet;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Idempotent (Stateless)&lt;/strong&gt; - Side-effect free, can happen multiple times without affecting the data state;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resource&lt;/strong&gt; - A single instance of an object in an endpoint request response;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;REST (RESTful)&lt;/strong&gt; - Representational State Transfer, an architectural style for the design of network-based software;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SSL&lt;/strong&gt; - Secure Socket Layer, the standard security technology for establishing an encrypted link between a web server and a browser&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;URL&lt;/strong&gt; - Uniform Resource Locator and is a reference (an address) to a resource on the Internet.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;URL Segment&lt;/strong&gt; - A slash-separated piece of information in the URL;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aim&quot;&gt;AIM&lt;/h3&gt;

&lt;p&gt;The aim of this design guide is to assist in the planing and development of a REST API.&lt;/p&gt;

&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;/h3&gt;

&lt;p&gt;An API is an: Application Programming Interface. An interface for one piece of software to talk to another[^concepts] and data to be shared. It is a set of endpoints for serving up data.&lt;/p&gt;

&lt;h3 id=&quot;rest-api&quot;&gt;REST API&lt;/h3&gt;

&lt;p&gt;REST API is an architectural design style that follows a defined set of objectives. It was first defined by Roy &lt;a href=&quot;https://en.wikipedia.org/wiki/Roy_Fielding&quot;&gt;Thomas Fielding&lt;/a&gt; in his 2000 PhD dissertation “Architectural Styles and the Design of Network-based Software Architectures”.&lt;/p&gt;

&lt;p&gt;The REST architectural style aims to be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Stateless:&lt;/strong&gt; each request contains all the information needed to complete the request;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Independent:&lt;/strong&gt; client-server model allows for different client environments and implementations to use the API;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cacheable:&lt;/strong&gt; responses define themselves as cacheable or not, improving latency, scalability and responsiveness;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Granularity:&lt;/strong&gt; use the lowest possible level of deatil to satisfy as many difference requirements and use cases as possible;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Secure:&lt;/strong&gt; use of HTTP authorisation headers to securely send data;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Encapsulation:&lt;/strong&gt; expose only the date data you want to, in a controlled way;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;success&quot;&gt;Success&lt;/h3&gt;

&lt;p&gt;A successful REST API, is one that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Has good documentation that is easy to find;&lt;/li&gt;
  &lt;li&gt;Uses web standards where they make sense;&lt;/li&gt;
  &lt;li&gt;Is friendly to the developer and can be explored via a browser address bar;&lt;/li&gt;
  &lt;li&gt;Is simple, intuitive and consistent to make adoption not only easy but pleasant;&lt;/li&gt;
  &lt;li&gt;Provides enough flexibility to power the majority of development environments;&lt;/li&gt;
  &lt;li&gt;Is efficient, while maintaining a balance with other requirements;&lt;/li&gt;
  &lt;li&gt;Has been developed using Test Driven Development (TDD) principles&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;The API should be well documented with cURL examples with JSON responses. A cURL examples can be cut-and-pasted, removing any ambiguity regarding endpoint calls and applicable JSON responses.&lt;/p&gt;

&lt;h3 id=&quot;api-baseroot-url&quot;&gt;API BASE/ROOT URL&lt;/h3&gt;

&lt;p&gt;The root or entry point into the API should be as simple as possible. Long complex URLs appear daunting. Two common API roots are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.example.com/*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://example.com/api/*&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The single root entry point should contain some basic information about the API, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Information on the API version;&lt;/li&gt;
  &lt;li&gt;Supported features;&lt;/li&gt;
  &lt;li&gt;A list of top-level collections;&lt;/li&gt;
  &lt;li&gt;A list of singleton resources;&lt;/li&gt;
  &lt;li&gt;A small summary of operating status;&lt;/li&gt;
  &lt;li&gt;Some statistics;&lt;/li&gt;
  &lt;li&gt;A link to the documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;versioning&quot;&gt;Versioning&lt;/h3&gt;

&lt;p&gt;The version number should refer to major releases of the API. An API is never going to be stable, change is inevitable in fact needed. What is important is how that change is managed. When third-party software applications (clients) integrate with your API, they become dependent on the availability of the API. Versioning allows for backwards compatibility and continued development.&lt;/p&gt;

&lt;p&gt;There are two common methods for managing API versions:&lt;/p&gt;

&lt;p&gt;1) in the request HTTP header;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept: application/com.ianteda.app-v3+json
Content-Type: application/com.ianteda.app-v3+json 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2) in the URL;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET https://api.example.com/v1/endpoint
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This guide recommends option 2. Having the API version in the endpoint URL, it is obvious and human readable.&lt;/p&gt;

&lt;h3 id=&quot;security&quot;&gt;Security&lt;/h3&gt;

&lt;p&gt;All API requests and responses should be over SSL (HTTPS). Do not redirect non-SSL requests to the SSL endpoint, as this can leak information. Instead throw an API error response when the request comes over non-SSL.&lt;/p&gt;

&lt;p&gt;With the use of Webtokens, SSL simplifies the authentication model. Never use a custom authentication protocol, stick to the standards like &lt;a href=&quot;https://oauth.net/2/&quot;&gt;Oauth 2&lt;/a&gt;. Webtokens means the users state (authentication) is kept on the user end, sot that every request can be authenticated against the webtokens. This avoids server session states, sticking to the REST stateless server principle.&lt;/p&gt;

&lt;p&gt;Access within the API should be based on the resource not the endpoint URL.&lt;/p&gt;

&lt;p&gt;Use request rate limiting to the endpoints, to avoid performance issues.&lt;/p&gt;

&lt;p&gt;Keep in mind when providing authentication responses that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;401 “Unauthorized”&lt;/strong&gt; - Really means unauthenticated. You need valid credentials for me to respond to this request;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;403 “Forbidden”&lt;/strong&gt; - Really means unauthorized. I understood your credentials, but sorry, you are not allowed to access that resource;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;error-messages&quot;&gt;Error Messages&lt;/h3&gt;

&lt;p&gt;When responding with an error the JSON body should return a useful error message, a unique internal error code with reference to documentation, a detailed description and a 400 http status. Error messages should be human-readable from the browser, include a diagnostic message to help the consumer resolve the error condition and be as descriptive as possible.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Status: 400 BAD REQUEST
{
  &quot;code&quot; : unique_project_code,
  &quot;property&quot; : &quot;What caused the error&quot;,
  &quot;message&quot; : &quot;Something bad has happened :(&quot;,
  &quot;description&quot; : &quot;More details about the error here&quot;,
  &quot;developer_message : &quot;Extra information to help resolve the error response&quot;,
  &quot;documentation_url&quot;: &quot;https://ianteda.com/api/documentation&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;endpoints&quot;&gt;Endpoints&lt;/h3&gt;

&lt;h4 id=&quot;rules&quot;&gt;Rules&lt;/h4&gt;

&lt;p&gt;Some Endpoint rules to keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Nouns&lt;/strong&gt; - Always represent endpoints with nouns, not verbs;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Plurals&lt;/strong&gt; - Always use the plural of the noun. It avoids confusing pluralisation such as person and people;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logical&lt;/strong&gt; - Endpoints should make sense from the perspective of the API consumer. Aka developer, not the data model;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Not one-to-one&lt;/strong&gt; - Endpoints don’t necessarily need to or make sense to map one-to-one to the data (database) model;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt; - Endpoint actions should be verbs;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;down case&lt;/strong&gt; - Down case end points and actions;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Snake Case&lt;/strong&gt; - Use snake_case;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Full Path&lt;/strong&gt; - In your responses provide a link to the fully qualified canoncial API path;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resource Created&lt;/strong&gt; - When posting (creation and update) to an endpoint the response should return the resource created;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Names and IDs&lt;/strong&gt; - Accept Ids and names in endpoint requests;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Limit Nesting&lt;/strong&gt; - Limit endpoint nesting;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Human Readable&lt;/strong&gt; - The API response should  be human readable, pretty print by default. i.e. Do not remove white space;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GZip&lt;/strong&gt; - Compress responses, since we are going pretty print response with whitespaces;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cache&lt;/strong&gt; - Cache responses with ETag and &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: max-age=0, private, must-revalidate&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Media Type&lt;/strong&gt; - Use Media Type &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type: application/json; charset=utf-8&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expansion&lt;/strong&gt; - Keep response as small as possible with links to expansion (or materialisation);&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt; - Each endpoint should provide a link to its documentation;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Boolean&lt;/strong&gt; - Treat boolean actions on a resource as a sub resource. &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT /resource/{key}/activate&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Granularity:&lt;/strong&gt; Keep resource detail to the lowest practical level with links to expansion;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Multiple Endpoing Query:&lt;/strong&gt; Create an endpoint for multiple resource queries, such as search;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Analytics&lt;/strong&gt; - Keep track of the version/endpoints of your API being used by Consumers;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Response Output&lt;/strong&gt; - Use JSON;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;actions&quot;&gt;Actions&lt;/h4&gt;

&lt;p&gt;Typical actions on an endpoint&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Method&lt;/th&gt;
      &lt;th&gt;URI end point&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/resource&lt;/td&gt;
      &lt;td&gt;Returns a list of all the resources in the collection. By default items in the list are a minimal representation of themselves&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/resource/{key}&lt;/td&gt;
      &lt;td&gt;Returns the full content of the resource identified by the given key (name or id)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;/resource&lt;/td&gt;
      &lt;td&gt;Create a new resource&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt;/resource/{key}&lt;/td&gt;
      &lt;td&gt;Update a resource identified by the given key (name or id)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PATCH&lt;/td&gt;
      &lt;td&gt;/resource/{key}&lt;/td&gt;
      &lt;td&gt;Partially update a resource identified by the given key (name or id)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELTE&lt;/td&gt;
      &lt;td&gt;/resource/{key}&lt;/td&gt;
      &lt;td&gt;Delete a resource identified by the given key (name or id)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;relationships&quot;&gt;Relationships&lt;/h4&gt;

&lt;h5 id=&quot;one-to-many-relationships&quot;&gt;One to many relationships&lt;/h5&gt;

&lt;p&gt;If Relationships exist within a resource, extend the endpoint.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Method&lt;/th&gt;
      &lt;th&gt;URI end point&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/resource/{key}/relationship&lt;/td&gt;
      &lt;td&gt;Retrieve a list of relationships for the resource {key (name or id)}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;/resource/{key}/relationship/{key}&lt;/td&gt;
      &lt;td&gt;Retrieve relationship {key} (name or id) for a given resource {key (name or id)}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;/resource/{key}/relationship&lt;/td&gt;
      &lt;td&gt;Create a new relationship for a given resource {key (name or id)}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt;/resource/{key}/relationship/{key}&lt;/td&gt;
      &lt;td&gt;Update relationship {key} (name or ide) for ticket {key (name or id)}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PATCH&lt;/td&gt;
      &lt;td&gt;/resource/{key}/relationship/{key}&lt;/td&gt;
      &lt;td&gt;Partially update relationship {key (name or id)} for resource {key (name or id)}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;/resource/{key}/relationship/{key}&lt;/td&gt;
      &lt;td&gt;Delete relationship {key (name or id)} for resource {key (name or id)}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;many-to-many-relationships&quot;&gt;Many to many relationships&lt;/h5&gt;

&lt;p&gt;If the relationship exists external to a resource, provide an end point for the relationship. With a href link within the resource response to the relationship. By creating an endpoint for the relationship it can be deleted without deleting the resource.&lt;/p&gt;

&lt;h4 id=&quot;provide-request-ids-for-introspection&quot;&gt;Provide Request-Ids for Introspection&lt;/h4&gt;

&lt;p&gt;Include a Request-Id header in each API response, populated with a UUID value. By logging these values on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.&lt;/p&gt;

&lt;h4 id=&quot;pagination&quot;&gt;Pagination&lt;/h4&gt;

&lt;p&gt;Divide large responses across multiple requests with pagination. Using offset and limit parameters&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;../resource?offset=50&amp;amp;limit=25&lt;/code&gt; - Will return a response starting from 50 of the next 25 resource items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Provide links within the paged response to other pages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;first&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/resource/00001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;previous&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/resource/34523&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;next&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/resource/34525&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;last&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/resource/8764534&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;index : {
    00001: &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/resource?offset=0&amp;amp;limit=25&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;,
    00002: &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/resource?offset=25&amp;amp;limit=25&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;,
    00003: &quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/resource?offset=50&amp;amp;limit=25&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;parameters&quot;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;Complex result filters, sorting and searching can all be easily implemented as query parameters on top of the resource URL&lt;/p&gt;

&lt;h5 id=&quot;filtering&quot;&gt;Filtering&lt;/h5&gt;

&lt;p&gt;Use a unique query parameter for each field that implements filtering. When requesting a list of resources from the /resources endpoint the default should be the smallest practical, say those in the open state. Provide a mechanism to return all &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /resources?state=all&lt;/code&gt; or those closed &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /resources?state=closed&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;sorting&quot;&gt;Sorting&lt;/h5&gt;

&lt;p&gt;Use the a generic parameter such as &lt;code class=&quot;highlighter-rouge&quot;&gt;?sort=&lt;/code&gt; to describe sorting rules for a resource endpoint. Accommodate complex sorting requirements with a list of comma separated fields, each with a possible unary negative for descending order or positive.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /resources?sort=-priority&lt;/code&gt; - Responds with a list of resources in descending order of priority field&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /resources?sort=-priority,created_at&lt;/code&gt; - Responds with a list of resources in descending order of priority.  With older resources within the priority being first.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;searching&quot;&gt;Searching&lt;/h5&gt;

&lt;p&gt;Sometimes basic filters is not enough and you need the power of full text search. Use a query parameter on the resources endpoint &lt;code class=&quot;highlighter-rouge&quot;&gt;?query=search term&lt;/code&gt;. Search queries should be passed straight to the search engine and API output should be in the same format as a normal list result.&lt;/p&gt;

&lt;p&gt;To make the API experience more pleasant for the average consumer, consider packaging up sets of query conditions into easily accessible endpoints.&lt;/p&gt;

&lt;h3 id=&quot;http-status-codes&quot;&gt;HTTP status codes&lt;/h3&gt;

&lt;p&gt;HTTP status codes can help your consumers navigate your API. Providing context to the API responses.&lt;/p&gt;

&lt;p&gt;Useful list of API HTTP status codes&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Code&lt;/th&gt;
      &lt;th&gt;Status&lt;/th&gt;
      &lt;th&gt;Notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;200&lt;/td&gt;
      &lt;td&gt;OK&lt;/td&gt;
      &lt;td&gt;Response to a successful GET, PUT, PATCH or DELETE. Can also be used for a POST that doesn’t result in a creation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;201&lt;/td&gt;
      &lt;td&gt;Created&lt;/td&gt;
      &lt;td&gt;Response to a POST that results in a creation. Should be combined with a Location header pointing to the location of the new resource&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;204&lt;/td&gt;
      &lt;td&gt;No Content&lt;/td&gt;
      &lt;td&gt;Response to a successful request that won’t be returning a body (like a DELETE request)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;304&lt;/td&gt;
      &lt;td&gt;Not Modified&lt;/td&gt;
      &lt;td&gt;Used when HTTP caching headers are in play&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;400&lt;/td&gt;
      &lt;td&gt;Bad Request&lt;/td&gt;
      &lt;td&gt;The request is malformed, such as if the body does not parse&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;401&lt;/td&gt;
      &lt;td&gt;Unauthorized&lt;/td&gt;
      &lt;td&gt;When no or invalid authentication details are provided. Also useful to trigger an auth popup if the API is used from a browser&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;403&lt;/td&gt;
      &lt;td&gt;Forbidden&lt;/td&gt;
      &lt;td&gt;When authentication succeeded but authenticated user doesn’t have access to the resource&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;404&lt;/td&gt;
      &lt;td&gt;Not Found&lt;/td&gt;
      &lt;td&gt;When a non-existent resource is requested&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;405&lt;/td&gt;
      &lt;td&gt;Method Not Allowed&lt;/td&gt;
      &lt;td&gt;When an HTTP method is being requested that isn’t allowed for the authenticated user&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;410&lt;/td&gt;
      &lt;td&gt;Gone&lt;/td&gt;
      &lt;td&gt;Indicates that the resource at this end point is no longer available. Useful as a blanket response for old API versions&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;415&lt;/td&gt;
      &lt;td&gt;Unsupported Media Type&lt;/td&gt;
      &lt;td&gt;If incorrect content type was provided as part of the request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;422&lt;/td&gt;
      &lt;td&gt;Unprocessable Entity&lt;/td&gt;
      &lt;td&gt;Used for validation errors&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;429&lt;/td&gt;
      &lt;td&gt;Too Many Requests&lt;/td&gt;
      &lt;td&gt;When a request is rejected due to rate limiting&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;references&quot;&gt;References&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://phraseapp.com/blog/posts/best-practice-10-design-tips-for-apis/&quot;&gt;10 Design Tips For APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Application_programming_interface&quot;&gt;Application programming interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api&quot;&gt;Best Practices for a Pragmatic RESTful API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mZ8_QgJ5mbs&quot;&gt;Beautiful REST &amp;amp; JSON APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.octo.com/en/design-a-rest-api/&quot;&gt;How to design a REST API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;Representational state transfer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling&quot;&gt;REST API Design - Resource Modeling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7YcW25PHnAA&quot;&gt;REST API concepts and examples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://restful-api-design.readthedocs.io/en/latest/&quot;&gt;Thoughts on RESTful API Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/671118/what-exactly-is-restful-programming&quot;&gt;What Exactly is RESTful Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><category term="programming" /><category term="API" /><summary>An API allows one piece of software talking to another piece of software


Definitions

Some terms used in this guide and there definitions:


  API - Application Programming Interface, an interface for one piece of software to talk to another;
  Collection - A collection of resources found at an endpoint;
  Consumer (Client) - A client computer application making requests of the API;
  cURL - A command line tool for getting and sending files using URL syntax;
  Endpoint - An API URL on a Server which represents either a Resource or a Collection;
  Granularity - The level of detailed returned in the request response;
  HTTP - A protocol for communicating over networks, aka the internet;
  Idempotent (Stateless) - Side-effect free, can happen multiple times without affecting the data state;
  Resource - A single instance of an object in an endpoint request response;
  REST (RESTful) - Representational State Transfer, an architectural style for the design of network-based software;
  SSL - Secure Socket Layer, the standard security technology for establishing an encrypted link between a web server and a browser
  URL - Uniform Resource Locator and is a reference (an address) to a resource on the Internet.
  URL Segment - A slash-separated piece of information in the URL;


AIM

The aim of this design guide is to assist in the planing and development of a REST API.

Overview

An API is an: Application Programming Interface. An interface for one piece of software to talk to another[^concepts] and data to be shared. It is a set of endpoints for serving up data.

REST API

REST API is an architectural design style that follows a defined set of objectives. It was first defined by Roy Thomas Fielding in his 2000 PhD dissertation “Architectural Styles and the Design of Network-based Software Architectures”.

The REST architectural style aims to be:


  Stateless: each request contains all the information needed to complete the request;
  Independent: client-server model allows for different client environments and implementations to use the API;
  Cacheable: responses define themselves as cacheable or not, improving latency, scalability and responsiveness;
  Granularity: use the lowest possible level of deatil to satisfy as many difference requirements and use cases as possible;
  Secure: use of HTTP authorisation headers to securely send data;
  Encapsulation: expose only the date data you want to, in a controlled way;


Success

A successful REST API, is one that:


  Has good documentation that is easy to find;
  Uses web standards where they make sense;
  Is friendly to the developer and can be explored via a browser address bar;
  Is simple, intuitive and consistent to make adoption not only easy but pleasant;
  Provides enough flexibility to power the majority of development environments;
  Is efficient, while maintaining a balance with other requirements;
  Has been developed using Test Driven Development (TDD) principles


Documentation

The API should be well documented with cURL examples with JSON responses. A cURL examples can be cut-and-pasted, removing any ambiguity regarding endpoint calls and applicable JSON responses.

API BASE/ROOT URL

The root or entry point into the API should be as simple as possible. Long complex URLs appear daunting. Two common API roots are:


  https://api.example.com/*
  https://example.com/api/*


The single root entry point should contain some basic information about the API, such as:


  Information on the API version;
  Supported features;
  A list of top-level collections;
  A list of singleton resources;
  A small summary of operating status;
  Some statistics;
  A link to the documentation


Versioning

The version number should refer to major releases of the API. An API is never going to be stable, change is inevitable in fact needed. What is important is how that change is managed. When third-party software applications (clients) integrate with your API, they become dependent on the availability of the API. Versioning allows for backwards compatibility and continued development.

There are two common methods for managing API versions:

1) in the request HTTP header;

Accept: application/com.ianteda.app-v3+json
Content-Type: application/com.ianteda.app-v3+json 



2) in the URL;

GET https://api.example.com/v1/endpoint



This guide recommends option 2. Having the API version in the endpoint URL, it is obvious and human readable.

Security

All API requests and responses should be over SSL (HTTPS). Do not redirect non-SSL requests to the SSL endpoint, as this can leak information. Instead throw an API error response when the request comes over non-SSL.

With the use of Webtokens, SSL simplifies the authentication model. Never use a custom authentication protocol, stick to the standards like Oauth 2. Webtokens means the users state (authentication) is kept on the user end, sot that every request can be authenticated against the webtokens. This avoids server session states, sticking to the REST stateless server principle.

Access within the API should be based on the resource not the endpoint URL.

Use request rate limiting to the endpoints, to avoid performance issues.

Keep in mind when providing authentication responses that:


  401 “Unauthorized” - Really means unauthenticated. You need valid credentials for me to respond to this request;
  403 “Forbidden” - Really means unauthorized. I understood your credentials, but sorry, you are not allowed to access that resource;


Error Messages

When responding with an error the JSON body should return a useful error message, a unique internal error code with reference to documentation, a detailed description and a 400 http status. Error messages should be human-readable from the browser, include a diagnostic message to help the consumer resolve the error condition and be as descriptive as possible.

Status: 400 BAD REQUEST
{
  &quot;code&quot; : unique_project_code,
  &quot;property&quot; : &quot;What caused the error&quot;,
  &quot;message&quot; : &quot;Something bad has happened :(&quot;,
  &quot;description&quot; : &quot;More details about the error here&quot;,
  &quot;developer_message : &quot;Extra information to help resolve the error response&quot;,
  &quot;documentation_url&quot;: &quot;https://ianteda.com/api/documentation&quot;
}



Endpoints

Rules

Some Endpoint rules to keep in mind:


  Nouns - Always represent endpoints with nouns, not verbs;
  Plurals - Always use the plural of the noun. It avoids confusing pluralisation such as person and people;
  Logical - Endpoints should make sense from the perspective of the API consumer. Aka developer, not the data model;
  Not one-to-one - Endpoints don’t necessarily need to or make sense to map one-to-one to the data (database) model;
  Actions - Endpoint actions should be verbs;
  down case - Down case end points and actions;
  Snake Case - Use snake_case;
  Full Path - In your responses provide a link to the fully qualified canoncial API path;
  Resource Created - When posting (creation and update) to an endpoint the response should return the resource created;
  Names and IDs - Accept Ids and names in endpoint requests;
  Limit Nesting - Limit endpoint nesting;
  Human Readable - The API response should  be human readable, pretty print by default. i.e. Do not remove white space;
  GZip - Compress responses, since we are going pretty print response with whitespaces;
  Cache - Cache responses with ETag and Cache-Control: max-age=0, private, must-revalidate;
  Media Type - Use Media Type Content-Type: application/json; charset=utf-8;
  Expansion - Keep response as small as possible with links to expansion (or materialisation);
  Documentation - Each endpoint should provide a link to its documentation;
  Boolean - Treat boolean actions on a resource as a sub resource. PUT /resource/{key}/activate;
  Granularity: Keep resource detail to the lowest practical level with links to expansion;
  Multiple Endpoing Query: Create an endpoint for multiple resource queries, such as search;
  Analytics - Keep track of the version/endpoints of your API being used by Consumers;
  Response Output - Use JSON;


Actions

Typical actions on an endpoint


  
    
      Method
      URI end point
      Notes
    
  
  
    
      GET
      /resource
      Returns a list of all the resources in the collection. By default items in the list are a minimal representation of themselves
    
    
      GET
      /resource/{key}
      Returns the full content of the resource identified by the given key (name or id)
    
    
      POST
      /resource
      Create a new resource
    
    
      PUT
      /resource/{key}
      Update a resource identified by the given key (name or id)
    
    
      PATCH
      /resource/{key}
      Partially update a resource identified by the given key (name or id)
    
    
      DELTE
      /resource/{key}
      Delete a resource identified by the given key (name or id)
    
  


Relationships

One to many relationships

If Relationships exist within a resource, extend the endpoint.


  
    
      Method
      URI end point
      Notes
    
  
  
    
      GET
      /resource/{key}/relationship
      Retrieve a list of relationships for the resource {key (name or id)}
    
    
      GET
      /resource/{key}/relationship/{key}
      Retrieve relationship {key} (name or id) for a given resource {key (name or id)}
    
    
      POST
      /resource/{key}/relationship
      Create a new relationship for a given resource {key (name or id)}
    
    
      PUT
      /resource/{key}/relationship/{key}
      Update relationship {key} (name or ide) for ticket {key (name or id)}
    
    
      PATCH
      /resource/{key}/relationship/{key}
      Partially update relationship {key (name or id)} for resource {key (name or id)}
    
    
      DELETE
      /resource/{key}/relationship/{key}
      Delete relationship {key (name or id)} for resource {key (name or id)}
    
  


Many to many relationships

If the relationship exists external to a resource, provide an end point for the relationship. With a href link within the resource response to the relationship. By creating an endpoint for the relationship it can be deleted without deleting the resource.

Provide Request-Ids for Introspection

Include a Request-Id header in each API response, populated with a UUID value. By logging these values on the client, server and any backing services, it provides a mechanism to trace, diagnose and debug requests.

Pagination

Divide large responses across multiple requests with pagination. Using offset and limit parameters


  ../resource?offset=50&amp;amp;limit=25 - Will return a response starting from 50 of the next 25 resource items.


Provide links within the paged response to other pages.

{
  &quot;first&quot; : &quot;/resource/00001&quot;,
  &quot;previous&quot; : &quot;/resource/34523&quot;,
  &quot;next&quot; : &quot;/resource/34525&quot;,
  &quot;last&quot; : &quot;/resource/8764534&quot;,
  &quot;index : {
    00001: &quot;/resource?offset=0&amp;amp;limit=25&quot;,
    00002: &quot;/resource?offset=25&amp;amp;limit=25&quot;,
    00003: &quot;/resource?offset=50&amp;amp;limit=25&quot;
  }
}



Parameters

Complex result filters, sorting and searching can all be easily implemented as query parameters on top of the resource URL

Filtering

Use a unique query parameter for each field that implements filtering. When requesting a list of resources from the /resources endpoint the default should be the smallest practical, say those in the open state. Provide a mechanism to return all GET /resources?state=all or those closed GET /resources?state=closed

Sorting

Use the a generic parameter such as ?sort= to describe sorting rules for a resource endpoint. Accommodate complex sorting requirements with a list of comma separated fields, each with a possible unary negative for descending order or positive.


  GET /resources?sort=-priority - Responds with a list of resources in descending order of priority field
  GET /resources?sort=-priority,created_at - Responds with a list of resources in descending order of priority.  With older resources within the priority being first.


Searching

Sometimes basic filters is not enough and you need the power of full text search. Use a query parameter on the resources endpoint ?query=search term. Search queries should be passed straight to the search engine and API output should be in the same format as a normal list result.

To make the API experience more pleasant for the average consumer, consider packaging up sets of query conditions into easily accessible endpoints.

HTTP status codes

HTTP status codes can help your consumers navigate your API. Providing context to the API responses.

Useful list of API HTTP status codes


  
    
      Code
      Status
      Notes
    
  
  
    
      200
      OK
      Response to a successful GET, PUT, PATCH or DELETE. Can also be used for a POST that doesn’t result in a creation
    
    
      201
      Created
      Response to a POST that results in a creation. Should be combined with a Location header pointing to the location of the new resource
    
    
      204
      No Content
      Response to a successful request that won’t be returning a body (like a DELETE request)
    
    
      304
      Not Modified
      Used when HTTP caching headers are in play
    
    
      400
      Bad Request
      The request is malformed, such as if the body does not parse
    
    
      401
      Unauthorized
      When no or invalid authentication details are provided. Also useful to trigger an auth popup if the API is used from a browser
    
    
      403
      Forbidden
      When authentication succeeded but authenticated user doesn’t have access to the resource
    
    
      404
      Not Found
      When a non-existent resource is requested
    
    
      405
      Method Not Allowed
      When an HTTP method is being requested that isn’t allowed for the authenticated user
    
    
      410
      Gone
      Indicates that the resource at this end point is no longer available. Useful as a blanket response for old API versions
    
    
      415
      Unsupported Media Type
      If incorrect content type was provided as part of the request
    
    
      422
      Unprocessable Entity
      Used for validation errors
    
    
      429
      Too Many Requests
      When a request is rejected due to rate limiting
    
  


References

  10 Design Tips For APIs
  Application programming interface
  Best Practices for a Pragmatic RESTful API
  Beautiful REST &amp;amp; JSON APIs
  How to design a REST API
  Representational state transfer
  REST API Design - Resource Modeling
  REST API concepts and examples
  Thoughts on RESTful API Design
  What Exactly is RESTful Programming</summary></entry><entry><title>The Turtle Mindset</title><link href="https://ianteda.com/management/the-turtle-mindset.html" rel="alternate" type="text/html" title="The Turtle Mindset" /><published>2016-07-01T00:00:00+10:00</published><updated>2016-07-01T00:00:00+10:00</updated><id>https://ianteda.com/management/the-turtle-mindset</id><content type="html" xml:base="https://ianteda.com/management/the-turtle-mindset.html">&lt;blockquote&gt;
  &lt;p&gt;“Turtles carry their homes on their backs.” Running her finger over the tattoo, she tells him what her dad told her: “They’re exposed and hidden at the same time. They’re a symbol of strength and perseverance.”
&lt;cite&gt; – Christina Baker Kline&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the Aesop’s Fables “&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Tortoise_and_the_Hare&quot;&gt;The Tortoise and the Hare&lt;/a&gt;”, the turtle wins the race not by aiming for big (fast) wins, instead he stays on his path with a single minded focus. Soon overtaking the hare, one little win at a time.&lt;/p&gt;

&lt;p&gt;I was first introduced to the concept of winning by not losing early in my engineering career, when explained the relationship between costs, quality and profits. Say you are building widgets for $97 (cost) and are selling them for $100 (revenue). Making $3 (profit) per widget. You discover one of the widgets needs $9 of rework to fix a defect (quality). To draw even, or not lose money in your widget making venture you will need to make the next three widgets defect free. Another way to think of it, is that you are using the profits from the next three widgets to fix the defect. The moral of the story: build things right (quality), build things once (cost) and you will make money (profits). You lose money when you have to come back and fix mistakes.&lt;/p&gt;

&lt;p&gt;Most people wouldn’t call gambling on a horse race an investment and so at this point I think it is important to separate investing from speculation. Just like business, personal investing is a marathon, not a sprint and you cannot win a marathon by going backwards. Successful long-term investing has more to do with avoiding loses then capturing unrealised gains&lt;sup id=&quot;fnref:great&quot;&gt;&lt;a href=&quot;#fn:great&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Chasing +10 percent profits is speculation, a gamble not investing.&lt;/p&gt;

&lt;p&gt;Say you invest $100,000 from your widget profits, but the investment doesn’t workout as planned and you lose $10,000. Taking a 10 percent loss. You reinvest the remaining $90,000 hoping to draw even with your original $100,000 investment. To draw even you need make $10,000 from a $90,000 investment, an 11 percent gain. And it gets exponentially worse as losses increase. A 20% loss will require a 25% gain and so on&lt;sup id=&quot;fnref:reckoning&quot;&gt;&lt;a href=&quot;#fn:reckoning&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h5 id=&quot;original-ivestment-100000&quot;&gt;Original Ivestment: $100,000&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Investment Loss&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Loss Percentage&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Reinvestment Win&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Reinvestment Return&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$        10,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;10%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$         10,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;11%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$        20,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;20%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$         20,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;25%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$        30,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;30%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$         30,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;43%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$        40,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;40%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$         40,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;67%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$        50,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;50%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$         50,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;100%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$        60,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;60%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$         60,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;150%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$        70,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;70%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$         70,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;233%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$        80,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;80%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$         80,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;400%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$        90,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;90%&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$         90,000&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;900%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/win-loss-ratio-graph.jpg&quot; alt=&quot;Win Loss - Percentage Graph&quot; title=&quot;Win Loss Precentage Graph&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Watch the turtle. He only moves forward by sticking his neck out.
&lt;cite&gt; —Louis V. Gerstner, Jr.&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Richard Branson is known for his “Screw it let’s do it” tag line, but like all successful business people he always protects his down side. At the launch of Virgin Atlantic Branson negotiated with Boeing to buy back his plane if the venture didn’t work out&lt;sup id=&quot;fnref:branson&quot;&gt;&lt;a href=&quot;#fn:branson&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, limiting the downside or loses to 6 months of Virgin profits. Yes you need to take risks (see  “&lt;a href=&quot;/creativity/the-bold-mistake-instruction.html&quot;&gt;The Bold Mistake Instruction&lt;/a&gt;”), but betting the farm is rarely a good plan. Always protect your principle&lt;sup id=&quot;fnref:TIP&quot;&gt;&lt;a href=&quot;#fn:TIP&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h5 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h5&gt;
&lt;p&gt;Cover Photo Credit: &lt;a href=&quot;https://unsplash.com/photos/L-2p8fapOA8&quot;&gt;Wexor Tmg&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:great&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/pulse/great-investors-win-losing-daniel-crosby-ph-d-&quot; target=&quot;_blank&quot;&gt;Great Investors Win by Not Losing&lt;/a&gt; &lt;a href=&quot;#fnref:great&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:reckoning&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.dailyreckoning.com.au/investment-principles-winning-losing/2014/08/13/&quot; target=&quot;_blank&quot;&gt;The Investment Principles of Winning by not Losing&lt;/a&gt; &lt;a href=&quot;#fnref:reckoning&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:branson&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.forbes.com/sites/alisoncoleman/2014/05/11/risk-reward-and-worst-case-scenarios-how-entrepreneurs-like-richard-branson-and-tony-hsieh-call-it/#279756b3c28c&quot; target=&quot;_blank&quot;&gt;Risk, Reward And Worst Case Scenarios&lt;/a&gt; &lt;a href=&quot;#fnref:branson&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:TIP&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.theinvestorspodcast.com/the-intelligent-investor-benjamin-graham/&quot; target=&quot;_blank&quot;&gt;The Intelligent Investor By Benjamin Graham&lt;/a&gt; &lt;a href=&quot;#fnref:TIP&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><category term="management" /><category term="Leadership" /><category term="Business" /><summary>“Turtles carry their homes on their backs.” Running her finger over the tattoo, she tells him what her dad told her: “They’re exposed and hidden at the same time. They’re a symbol of strength and perseverance.”
 – Christina Baker Kline


In the Aesop’s Fables “The Tortoise and the Hare”, the turtle wins the race not by aiming for big (fast) wins, instead he stays on his path with a single minded focus. Soon overtaking the hare, one little win at a time.

I was first introduced to the concept of winning by not losing early in my engineering career, when explained the relationship between costs, quality and profits. Say you are building widgets for $97 (cost) and are selling them for $100 (revenue). Making $3 (profit) per widget. You discover one of the widgets needs $9 of rework to fix a defect (quality). To draw even, or not lose money in your widget making venture you will need to make the next three widgets defect free. Another way to think of it, is that you are using the profits from the next three widgets to fix the defect. The moral of the story: build things right (quality), build things once (cost) and you will make money (profits). You lose money when you have to come back and fix mistakes.

Most people wouldn’t call gambling on a horse race an investment and so at this point I think it is important to separate investing from speculation. Just like business, personal investing is a marathon, not a sprint and you cannot win a marathon by going backwards. Successful long-term investing has more to do with avoiding loses then capturing unrealised gains1. Chasing +10 percent profits is speculation, a gamble not investing.

Say you invest $100,000 from your widget profits, but the investment doesn’t workout as planned and you lose $10,000. Taking a 10 percent loss. You reinvest the remaining $90,000 hoping to draw even with your original $100,000 investment. To draw even you need make $10,000 from a $90,000 investment, an 11 percent gain. And it gets exponentially worse as losses increase. A 20% loss will require a 25% gain and so on2.

Original Ivestment: $100,000


  
    
      Investment Loss
      Loss Percentage
      Reinvestment Win
      Reinvestment Return
    
  
  
    
      $        10,000
      10%
      $         10,000
      11%
    
    
      $        20,000
      20%
      $         20,000
      25%
    
    
      $        30,000
      30%
      $         30,000
      43%
    
    
      $        40,000
      40%
      $         40,000
      67%
    
    
      $        50,000
      50%
      $         50,000
      100%
    
    
      $        60,000
      60%
      $         60,000
      150%
    
    
      $        70,000
      70%
      $         70,000
      233%
    
    
      $        80,000
      80%
      $         80,000
      400%
    
    
      $        90,000
      90%
      $         90,000
      900%
    
  





  Watch the turtle. He only moves forward by sticking his neck out.
 —Louis V. Gerstner, Jr.


Richard Branson is known for his “Screw it let’s do it” tag line, but like all successful business people he always protects his down side. At the launch of Virgin Atlantic Branson negotiated with Boeing to buy back his plane if the venture didn’t work out3, limiting the downside or loses to 6 months of Virgin profits. Yes you need to take risks (see  “The Bold Mistake Instruction”), but betting the farm is rarely a good plan. Always protect your principle4.

Footnotes
Cover Photo Credit: Wexor Tmg

  
    
      Great Investors Win by Not Losing &amp;#8617;
    
    
      The Investment Principles of Winning by not Losing &amp;#8617;
    
    
      Risk, Reward And Worst Case Scenarios &amp;#8617;
    
    
      The Intelligent Investor By Benjamin Graham &amp;#8617;</summary></entry><entry><title>The Passion Falsity</title><link href="https://ianteda.com/creativity/the-passion-falsity.html" rel="alternate" type="text/html" title="The Passion Falsity" /><published>2016-06-09T00:00:00+10:00</published><updated>2016-06-09T00:00:00+10:00</updated><id>https://ianteda.com/creativity/the-passion-falsity</id><content type="html" xml:base="https://ianteda.com/creativity/the-passion-falsity.html">&lt;blockquote&gt;
  &lt;p&gt;Life isn’t about finding yourself. Life is about creating yourself.
&lt;cite&gt; – GEORGE BERNHARD SHAW&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Life isn’t something you chip away at until you find your passion waiting inside. Life is something you build upon slowly over time, it is something you create&lt;sup id=&quot;fnref:tim-ferris&quot;&gt;&lt;a href=&quot;#fn:tim-ferris&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. So instead of discovering yourself, create yourself. Become a master craftsman of your life.&lt;/p&gt;

&lt;p&gt;Who doesn’t want to find their passion. It’s a romantic notion afterall. That inside you is a vocation you will love, that will bring you happiness and a fulfilling life. You just need the courage to search for it. But the question “What do I truly love?” rarely boils down to a yes-or-no answer. And as such, it will leave you confused and lost. “I want to be happy, I just need to keep looking”, is a mantra that will keep you perpetually looking and as a result unhappy about where you are. It will cause you to burn energy trying to figure out your passion, instead of building career capital in your craft. If Steve Jobs hand followed his own advice he would have picked apples.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To find yourself, think for yourself.
&lt;cite&gt; — SOCRATES&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Life doesn’t owe you happiness. It doesn’t owe you a successful, meaningful and rewarding career. You have to work for it, you need to earn it. By refining your craft, becoming a master craftsman. Being so good they can’t ignore you. Put aside the question of a true passion and focus on becoming good. It isn’t about you, it’s about what you can do for the world. The passion, satisfaction and enjoyment will follow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://amzn.to/1reowPn&quot;&gt;&lt;img src=&quot;/assets/images/book-so-good.jpg&quot; alt=&quot;So Good They Can&#39;t Ignore You - Book Cover&quot; title=&quot;So Good They Can&#39;t Ignore You - Book Cover&quot; class=&quot;book-cover&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“So Good They Can’t Ignore You” by &lt;a href=&quot;http://calnewport.com/&quot;&gt;Cal Newport&lt;/a&gt; defines people who have meaningful careers as having the following traits in there work&lt;sup id=&quot;fnref:so-good&quot;&gt;&lt;a href=&quot;#fn:so-good&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Autonomy&lt;/strong&gt;: Control over their day. What they work on and their priorities.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Competency&lt;/strong&gt;: They are good at what they do, and find it easy to do their work.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Respect&lt;/strong&gt;: People openly acknowledgement their skills and look to them for answers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is surprisingly hard to get people to give you money. If you want something rare and valuable - i.e. a successful, meaningful and rewarding career - you need something rare and valuable to trade in exchange and that commodity is your skills. The more experiences you have, the bigger your collections of mental models becomes&lt;sup id=&quot;fnref:mental&quot;&gt;&lt;a href=&quot;#fn:mental&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. And the more you are going to love your work because it will be easy, people will respect you and in return they will give you more autonomy. Focus on mastering the skills you can trade. You need to be good at what you do to get good things from your work&lt;sup id=&quot;fnref:youtube&quot;&gt;&lt;a href=&quot;#fn:youtube&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Mastery however is not enough, just look at the miserable workaholics. It is how you invest the fruits of those skills to build for you a meaningful and rewarding life. Be so good they can’t ignore you. So they will give you the autonomy and respect. Like a continuous feed back loop, the more experience you have the more you are going to enjoy your work, the more experience you will get.&lt;/p&gt;

&lt;p&gt;Don’t mistake passion for an idea, with passion for work. Passion for an idea will not get you anywhere without passion for work, for the process&lt;sup id=&quot;fnref:seal&quot;&gt;&lt;a href=&quot;#fn:seal&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. But hard work isn’t enough. There are lots of hardworking people that are not unhappy. What are they missing? They haven’t figured out how to cash in some of that career capital for autonomy, and what do with that it.&lt;/p&gt;

&lt;p&gt;To become a master craftsman take on an apprenticeship&lt;sup id=&quot;fnref:mind&quot;&gt;&lt;a href=&quot;#fn:mind&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; for guidance, look to roles models for direction, be uncomfortable with growth and be patient (see “&lt;a href=&quot;/management/the-turtle-mindset.html&quot;&gt;The Turtle Mindset&lt;/a&gt;”). But those are topics for whole other blog posts.&lt;/p&gt;

&lt;h4 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h4&gt;

&lt;p&gt;This post builds on the ideas and thoughts of &lt;a href=&quot;http://calnewport.com/&quot;&gt;Cal Newport&lt;/a&gt; and his book “Be So Good They Can’t Ignore You”&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:tim-ferris&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://fourhourworkweek.com/2016/06/05/kevin-kelly-ai-virtual-reality-and-the-inevitable/&quot;&gt;Tim Ferris podcast 166: with Kevin Kelly&lt;/a&gt; &lt;a href=&quot;#fnref:tim-ferris&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:so-good&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://amzn.to/1reowPn&quot;&gt;Amazon: Be So Good They Can’t Ignore You&lt;/a&gt; &lt;a href=&quot;#fnref:so-good&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:mental&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://ianteda.com/creativity/the-mental-model-definition.html&quot;&gt;The Mental Model Definition&lt;/a&gt; &lt;a href=&quot;#fnref:mental&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:youtube&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qwOdU02SE0w&quot;&gt;Cal Newport: So Good They Can’t Ignore You&lt;/a&gt; &lt;a href=&quot;#fnref:youtube&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:seal&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.theinvestorspodcast.com/tip92-billionaire-lives-w-navy-seal-nba-atlanta-hawks-owner-jesse-itzler/&quot;&gt;Billionaire Lives W/ Navy Seal for 31 Days&lt;/a&gt; &lt;a href=&quot;#fnref:seal&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:mind&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://ianteda.com/management/the-mastermind-brief.html&quot;&gt;The Mastermind Brief&lt;/a&gt; &lt;a href=&quot;#fnref:mind&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><category term="creativity" /><category term="Passion" /><summary>Life isn’t about finding yourself. Life is about creating yourself.
 – GEORGE BERNHARD SHAW


Life isn’t something you chip away at until you find your passion waiting inside. Life is something you build upon slowly over time, it is something you create1. So instead of discovering yourself, create yourself. Become a master craftsman of your life.

Who doesn’t want to find their passion. It’s a romantic notion afterall. That inside you is a vocation you will love, that will bring you happiness and a fulfilling life. You just need the courage to search for it. But the question “What do I truly love?” rarely boils down to a yes-or-no answer. And as such, it will leave you confused and lost. “I want to be happy, I just need to keep looking”, is a mantra that will keep you perpetually looking and as a result unhappy about where you are. It will cause you to burn energy trying to figure out your passion, instead of building career capital in your craft. If Steve Jobs hand followed his own advice he would have picked apples.


  To find yourself, think for yourself.
 — SOCRATES


Life doesn’t owe you happiness. It doesn’t owe you a successful, meaningful and rewarding career. You have to work for it, you need to earn it. By refining your craft, becoming a master craftsman. Being so good they can’t ignore you. Put aside the question of a true passion and focus on becoming good. It isn’t about you, it’s about what you can do for the world. The passion, satisfaction and enjoyment will follow.



“So Good They Can’t Ignore You” by Cal Newport defines people who have meaningful careers as having the following traits in there work2 :


  Autonomy: Control over their day. What they work on and their priorities.
  Competency: They are good at what they do, and find it easy to do their work.
  Respect: People openly acknowledgement their skills and look to them for answers.


It is surprisingly hard to get people to give you money. If you want something rare and valuable - i.e. a successful, meaningful and rewarding career - you need something rare and valuable to trade in exchange and that commodity is your skills. The more experiences you have, the bigger your collections of mental models becomes3. And the more you are going to love your work because it will be easy, people will respect you and in return they will give you more autonomy. Focus on mastering the skills you can trade. You need to be good at what you do to get good things from your work4.

Mastery however is not enough, just look at the miserable workaholics. It is how you invest the fruits of those skills to build for you a meaningful and rewarding life. Be so good they can’t ignore you. So they will give you the autonomy and respect. Like a continuous feed back loop, the more experience you have the more you are going to enjoy your work, the more experience you will get.

Don’t mistake passion for an idea, with passion for work. Passion for an idea will not get you anywhere without passion for work, for the process5. But hard work isn’t enough. There are lots of hardworking people that are not unhappy. What are they missing? They haven’t figured out how to cash in some of that career capital for autonomy, and what do with that it.

To become a master craftsman take on an apprenticeship6 for guidance, look to roles models for direction, be uncomfortable with growth and be patient (see “The Turtle Mindset”). But those are topics for whole other blog posts.

Footnotes

This post builds on the ideas and thoughts of Cal Newport and his book “Be So Good They Can’t Ignore You”


  
    
      Tim Ferris podcast 166: with Kevin Kelly &amp;#8617;
    
    
      Amazon: Be So Good They Can’t Ignore You &amp;#8617;
    
    
      The Mental Model Definition &amp;#8617;
    
    
      Cal Newport: So Good They Can’t Ignore You &amp;#8617;
    
    
      Billionaire Lives W/ Navy Seal for 31 Days &amp;#8617;
    
    
      The Mastermind Brief &amp;#8617;</summary></entry><entry><title>The Personal Branding Defence</title><link href="https://ianteda.com/management/the-personal-branding-defence.html" rel="alternate" type="text/html" title="The Personal Branding Defence" /><published>2016-05-08T00:00:00+10:00</published><updated>2016-05-08T00:00:00+10:00</updated><id>https://ianteda.com/management/the-personal-branding-defence</id><content type="html" xml:base="https://ianteda.com/management/the-personal-branding-defence.html">&lt;blockquote&gt;
  &lt;p&gt;Start by knowing what you want and who you are, build credibility around it and deliver it online in a compelling way.
&lt;cite&gt; — Krista Neher&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;you-are-a-brand&quot;&gt;You are a brand&lt;/h2&gt;

&lt;p&gt;If you are not branding yourself, others are doing it for you. Going to a job interview, leasing a house or doing business then your name will be googled. Personal branding is about managing your name in a world of misinformation, disinformation, and semi-permanent Google records&lt;sup id=&quot;fnref:tim-ferriss&quot;&gt;&lt;a href=&quot;#fn:tim-ferriss&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. “We are CEOs of our own companies: Me Inc.”, Tom Peters at Fast Company&lt;sup id=&quot;fnref:fast-company&quot;&gt;&lt;a href=&quot;#fn:fast-company&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Personal branding is about telling your story (1), letting the world know what you stand for (2) and building credibility (trust) around it (3). Think of your personal brand as what people say about you when you leave the room&lt;sup id=&quot;fnref:dorie-clark&quot;&gt;&lt;a href=&quot;#fn:dorie-clark&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;your-story&quot;&gt;1 - Your Story&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;If people like you they will listen to you, but if they trust you, they’ll do business with you.
&lt;cite&gt; — Zig Ziglar&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your story is the proof, the walk behind your talk. It demonstrates who you are and what you believe in. When telling your story don’t create two worlds be authentic, it is easier to remember. People will see through your false world, discard what you say and not trust you.&lt;/p&gt;

&lt;h3 id=&quot;your-values&quot;&gt;2 - Your Values&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;If people believe they share values with a company, they will stay loyal to the brand.
&lt;cite&gt; — Howard Schultz&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;People buy the brand not the product. In the same way people will buy into you, not what you say. &lt;sup id=&quot;fnref:start-with-why&quot;&gt;&lt;a href=&quot;#fn:start-with-why&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. Why should someone trust you? What code to you live by?&lt;/p&gt;

&lt;h3 id=&quot;build-credibility&quot;&gt;3 - Build Credibility&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;A brand is the set of expectations, memories, stories and relationships that, taken together, account for a consumer’s decision to choose one product or service over another.
&lt;cite&gt; — Seth Godin&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Building credibility is about continuing your story, sharing your thoughts and putting yourself out there. It builds your personal trust, authenticity and authority. A common way to build credibility is to blog (write). Put into words what you believe, think or notice about the world and then put a URL to it for others to read. You could also try doing a vlog.&lt;/p&gt;

&lt;h2 id=&quot;building-your-personal-brand&quot;&gt;Building your Personal Brand&lt;/h2&gt;

&lt;p&gt;The key to effective thinking is asking the right questions. Below is a list of questions to help develop your personal brand. I used the questions below to develop my &lt;a href=&quot;https://ianteda.com&quot;&gt;landing page&lt;/a&gt; and develop content for my blog.&lt;/p&gt;

&lt;h3 id=&quot;your-story-1&quot;&gt;Your Story&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What aspects of your life have been rewarding or you are proud to tell your mum?&lt;/li&gt;
  &lt;li&gt;What are you passionate about? What makes you angry? What do you care about?&lt;/li&gt;
  &lt;li&gt;What are you good at? What are your super powers? What skills have you spent time developing?&lt;/li&gt;
  &lt;li&gt;What tagline summaries your story?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;your-values-1&quot;&gt;Your Values&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What values do you live by? What priority do you put on those values?&lt;/li&gt;
  &lt;li&gt;Hint: Think of your values as your character. Describe yourself.&lt;/li&gt;
  &lt;li&gt;What are your ideal character traits?&lt;/li&gt;
  &lt;li&gt;What three people do you admire? Take a deeper look at their lives?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;your-credibility&quot;&gt;Your Credibility&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;What content can you create? Hint: Take a look at your values.&lt;/li&gt;
  &lt;li&gt;How can you add value through your content?&lt;/li&gt;
  &lt;li&gt;Create good content, don’t chase views.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;downloads&quot;&gt;Downloads&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/downloads/personal-branding-guide.html&quot; class=&quot;download-link&quot;&gt;Personal Branding Guide&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h5&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:tim-ferriss&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://fourhourworkweek.com/2008/01/28/tips-for-personal-branding-in-the-digital-age-google-insurance-cache-flow-and-more/&quot; target=&quot;_blank&quot;&gt;Tips for Personal Branding in the Digital Age&lt;/a&gt; &lt;a href=&quot;#fnref:tim-ferriss&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fast-company&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.fastcompany.com/28905/brand-called-you&quot; target=&quot;_blank&quot;&gt;The Brand Called You&lt;/a&gt; &lt;a href=&quot;#fnref:fast-company&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:dorie-clark&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.businessinnovationfactory.com/summit/story/what-do-people-say-about-you-when-you-leave-room&quot; target=&quot;_blank&quot;&gt;What do people say about your when you leave the room&lt;/a&gt; &lt;a href=&quot;#fnref:dorie-clark&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:start-with-why&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=u4ZoJKF_VuA&quot; target=&quot;_blank&quot;&gt;Start With Why - Simon Sinek TED talk&lt;/a&gt; &lt;a href=&quot;#fnref:start-with-why&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><category term="management" /><category term="Branding" /><summary>Start by knowing what you want and who you are, build credibility around it and deliver it online in a compelling way.
 — Krista Neher


You are a brand

If you are not branding yourself, others are doing it for you. Going to a job interview, leasing a house or doing business then your name will be googled. Personal branding is about managing your name in a world of misinformation, disinformation, and semi-permanent Google records1. “We are CEOs of our own companies: Me Inc.”, Tom Peters at Fast Company2.

Personal branding is about telling your story (1), letting the world know what you stand for (2) and building credibility (trust) around it (3). Think of your personal brand as what people say about you when you leave the room3.

1 - Your Story


  If people like you they will listen to you, but if they trust you, they’ll do business with you.
 — Zig Ziglar


Your story is the proof, the walk behind your talk. It demonstrates who you are and what you believe in. When telling your story don’t create two worlds be authentic, it is easier to remember. People will see through your false world, discard what you say and not trust you.

2 - Your Values


  If people believe they share values with a company, they will stay loyal to the brand.
 — Howard Schultz


People buy the brand not the product. In the same way people will buy into you, not what you say. 4. Why should someone trust you? What code to you live by?

3 - Build Credibility


  A brand is the set of expectations, memories, stories and relationships that, taken together, account for a consumer’s decision to choose one product or service over another.
 — Seth Godin


Building credibility is about continuing your story, sharing your thoughts and putting yourself out there. It builds your personal trust, authenticity and authority. A common way to build credibility is to blog (write). Put into words what you believe, think or notice about the world and then put a URL to it for others to read. You could also try doing a vlog.

Building your Personal Brand

The key to effective thinking is asking the right questions. Below is a list of questions to help develop your personal brand. I used the questions below to develop my landing page and develop content for my blog.

Your Story


  What aspects of your life have been rewarding or you are proud to tell your mum?
  What are you passionate about? What makes you angry? What do you care about?
  What are you good at? What are your super powers? What skills have you spent time developing?
  What tagline summaries your story?


Your Values


  What values do you live by? What priority do you put on those values?
  Hint: Think of your values as your character. Describe yourself.
  What are your ideal character traits?
  What three people do you admire? Take a deeper look at their lives?


Your Credibility


  What content can you create? Hint: Take a look at your values.
  How can you add value through your content?
  Create good content, don’t chase views.


Downloads
Personal Branding Guide

Footnotes

  
    
      Tips for Personal Branding in the Digital Age &amp;#8617;
    
    
      The Brand Called You &amp;#8617;
    
    
      What do people say about your when you leave the room &amp;#8617;
    
    
      Start With Why - Simon Sinek TED talk &amp;#8617;</summary></entry><entry><title>The Mental Model Definition</title><link href="https://ianteda.com/creativity/the-mental-model-definition.html" rel="alternate" type="text/html" title="The Mental Model Definition" /><published>2016-04-13T00:00:00+10:00</published><updated>2016-04-13T00:00:00+10:00</updated><id>https://ianteda.com/creativity/the-mental-model-definition</id><content type="html" xml:base="https://ianteda.com/creativity/the-mental-model-definition.html">&lt;blockquote&gt;
  &lt;p&gt;Man seeks for himself a simplified and lucid image of the world.
&lt;cite&gt; – Albert Einstein&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mental models simplify the world around us so we can make sense of our surroundings. They are an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstraction&quot;&gt;abstraction&lt;/a&gt; of reality, a simplification of an incomprehensibly world so our limited cognitive capabilities can process all our inputs without overload.&lt;/p&gt;

&lt;p&gt;I wanted to explore and better understand mental models and what better way to understand a topic then to try to explain it to someone else. So I sat down and wrote this blog post.&lt;/p&gt;

&lt;p&gt;Mental models are a set of tools (maps) our brains use to think and make decisions. A personal algorithm to process and make sense of the world around us. We use them to predict the results of our actions or those of others. Since they are a simplifications they don’t always hold true for all situations, contexts or moments in time. Because they represent (model) what is explicitly true, but not what is explicitly false. The world around us is continually changing, so should our mental models.&lt;/p&gt;

&lt;p&gt;We form Mental models either through direct, or shared experiences. We can see them in our and societies prejudices, beliefs, folklore and proverbs.&lt;/p&gt;

&lt;p&gt;Why do people with more experience get the job? Because they have more mental models to guide them. When your set of mental models is limited, so is your potential for finding a solution. The decision maker without a mental model to apply is overwhelmed &lt;sup id=&quot;fnref:creative-advatage&quot;&gt;&lt;a href=&quot;#fn:creative-advatage&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, we cannot function without them. We abstract away complexity and understanding when we hire a plumber, visit a doctor or engage a lawyer. Why? Because it would take a long time to learn all the knowledge and skills needed to be plumber, doctor and lawyer.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The image of the world around us, which we carry in our head, is just a model. Nobody in his head imagines all the world, government[s] or [countries]. He has only selected concepts, and relationships between them, and uses those to represent the real system.
&lt;cite&gt; – Jay Wright Forrester&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Over at &lt;a href=&quot;http://www.createadvantage.com/glossary/mental-model&quot;&gt;Creative Advantage&lt;/a&gt; they list four general problems with mental models:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, they could be wrong because they are limited by the simplifications that made them useful&lt;/li&gt;
  &lt;li&gt;Second, they could be improperly used&lt;/li&gt;
  &lt;li&gt;Third, they could lead to wrong answers if fed by incorrect information&lt;/li&gt;
  &lt;li&gt;Fourth, their effectiveness is rarely assessed.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If all you have is a hammer, everything looks like a nail.
&lt;cite&gt; – Abraham Maslow&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The more you master a single mental model, the more likely this mental model will be your downfall. Knowledge is about connections, connections between mental models. Wisdom is the application of that knowledge.&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:creative-advatage&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.createadvantage.com/glossary/mental-model&quot;&gt;Mental Model&lt;/a&gt; &lt;a href=&quot;#fnref:creative-advatage&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><category term="creativity" /><category term="mental model" /><summary>Man seeks for himself a simplified and lucid image of the world.
 – Albert Einstein


Mental models simplify the world around us so we can make sense of our surroundings. They are an abstraction of reality, a simplification of an incomprehensibly world so our limited cognitive capabilities can process all our inputs without overload.

I wanted to explore and better understand mental models and what better way to understand a topic then to try to explain it to someone else. So I sat down and wrote this blog post.

Mental models are a set of tools (maps) our brains use to think and make decisions. A personal algorithm to process and make sense of the world around us. We use them to predict the results of our actions or those of others. Since they are a simplifications they don’t always hold true for all situations, contexts or moments in time. Because they represent (model) what is explicitly true, but not what is explicitly false. The world around us is continually changing, so should our mental models.

We form Mental models either through direct, or shared experiences. We can see them in our and societies prejudices, beliefs, folklore and proverbs.

Why do people with more experience get the job? Because they have more mental models to guide them. When your set of mental models is limited, so is your potential for finding a solution. The decision maker without a mental model to apply is overwhelmed 1, we cannot function without them. We abstract away complexity and understanding when we hire a plumber, visit a doctor or engage a lawyer. Why? Because it would take a long time to learn all the knowledge and skills needed to be plumber, doctor and lawyer.


  The image of the world around us, which we carry in our head, is just a model. Nobody in his head imagines all the world, government[s] or [countries]. He has only selected concepts, and relationships between them, and uses those to represent the real system.
 – Jay Wright Forrester


Over at Creative Advantage they list four general problems with mental models:


  First, they could be wrong because they are limited by the simplifications that made them useful
  Second, they could be improperly used
  Third, they could lead to wrong answers if fed by incorrect information
  Fourth, their effectiveness is rarely assessed.



  If all you have is a hammer, everything looks like a nail.
 – Abraham Maslow


The more you master a single mental model, the more likely this mental model will be your downfall. Knowledge is about connections, connections between mental models. Wisdom is the application of that knowledge.

Footnotes


  
    
      Mental Model &amp;#8617;</summary></entry><entry><title>Gulp Jekyll Workflow - Part 1 Design Pattern</title><link href="https://ianteda.com/programming/gulp-jekyll-workflow-1.html" rel="alternate" type="text/html" title="Gulp Jekyll Workflow - Part 1 Design Pattern" /><published>2016-03-24T00:00:00+11:00</published><updated>2016-03-24T00:00:00+11:00</updated><id>https://ianteda.com/programming/gulp-jekyll-workflow-1</id><content type="html" xml:base="https://ianteda.com/programming/gulp-jekyll-workflow-1.html">&lt;blockquote&gt;
  &lt;p&gt;Always start with the end in mind. So you know what direction to travel&lt;br /&gt;
&lt;cite&gt; — Ian Teda &lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keeping the end in mind, I listed four design criteria (patterns) to target when writting Gulp tasks. I wanted my workflow to be modern, simple, configurable and modulised.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design Criteria/Patterns&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use ES2015, ECMAScript 2015 (modern): Why? Get accustom to new JavaScript features before they become mainstream.&lt;/li&gt;
  &lt;li&gt;Command Line Interface (simple): Why? KISS. Keep It Simple Stupid. A good design is a simple yet functional design.&lt;/li&gt;
  &lt;li&gt;Configuration File (configurable): Why? Make changes in one place, watch them permiate. Easier to read and maintain code.&lt;/li&gt;
  &lt;li&gt;Modulised Gulp tasks: Why? Makes for more readable, easier to reuse and maintainable code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;use-es2015httpwwwecma-internationalorgecma-26260-with-gulphttpgulpjscom&quot;&gt;1 - Use &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/&quot;&gt;ES2015&lt;/a&gt; with &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;To paraphrase the Babel tagline. Use next generation JavaScript, today with &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;. Since the release of Gulp (gulp-cli) version +3.9 &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp -v&lt;/code&gt; it is as easy as 1-2-3 to use ES2015 while writting Gulp tasks &lt;sup id=&quot;fnref:using-es6-with-gulp&quot;&gt;&lt;a href=&quot;#fn:using-es6-with-gulp&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;To get babel plugged into Gulp I used the following 3 steps:&lt;/p&gt;

&lt;p&gt;1 - Install npm packages for Babel and babel presents&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;core&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;es2015&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2 - Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt; file to enable 2015 presets&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3 - Rename &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.babel.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Done. See, as easy as 1-2-3.&lt;/p&gt;

&lt;h2 id=&quot;command-line-interface-with-yargshttpyargsjsorg&quot;&gt;2 - Command Line Interface with &lt;a href=&quot;http://yargs.js.org/&quot;&gt;Yargs&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Paraphrasing the &lt;a href=&quot;http://yargs.js.org/&quot;&gt;Yargs&lt;/a&gt; tagline. Build interactive command line tools by parsing arguments and generating an elegant user interface. Keeping with my design criteria, I refractored the Yargs configuration into a seperate config file &lt;code class=&quot;highlighter-rouge&quot;&gt;yargs.config.js&lt;/code&gt;. Which is then required from within the &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.babel.js&lt;/code&gt;. Keeping things neat and tidy.&lt;/p&gt;

&lt;p&gt;Require Yargs configuration file within &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.babel.js&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Command line (CLI) argument&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./gulp/yargs.config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Setup the user interface and configure the CLI arguments &lt;code class=&quot;highlighter-rouge&quot;&gt;yargs.config.js&lt;/code&gt; &lt;sup id=&quot;fnref:node-command-args&quot;&gt;&lt;a href=&quot;#fn:node-command-args&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * CLI (YARGS) Configuration
 * @param {yargs} yargs - Module for handling CLI arguments
 * @exports {argv} argv - Argument object
 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yargs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Usage: Gulp &amp;lt;task&amp;gt; [-p -prod -production]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Run script tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;prod&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Run Gulp tasks in production mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;gulp-configuration-file&quot;&gt;3 - Gulp Configuration File&lt;/h2&gt;

&lt;p&gt;Make changes in one place, watch them permiate. Which equals easier to read and maintain code.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.babel.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Configuration file for gulp tasks&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./gulp/gulp.config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.config.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;src/xyz.xyz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;src/&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;modulise-gulp-tasks&quot;&gt;4 - Modulise Gulp Tasks&lt;/h2&gt;

&lt;p&gt;Modulisation of Gulp tasks makes for more readable, easier to reuse and maintain code.&lt;/p&gt;

&lt;p&gt;Always abstract anything you need to do more than once. With that in mind a requireTask function is used to require task files from within &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.babel.js&lt;/code&gt;. &lt;sup id=&quot;fnref:module-gulp-tasks&quot;&gt;&lt;a href=&quot;#fn:module-gulp-tasks&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Import Gulp module&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gulp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Command line (CLI) argument&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./gulp/yargs.config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Configuration file for gulp tasks&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./gulp/gulp.config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Lazy load plugins, makes for neater source code&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gulp-load-plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulpLoadPlugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Require Gulp Task
 * @param {task} task - What Gulp task do you require
 * @return {function} function - Returns task function from module export
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requireTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Require Gulp task module, passing in Gulp, config, argv and plugin object references&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./gulp/tasks/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.task.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;plugins&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts:build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requireTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nameOfTask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The task &lt;code class=&quot;highlighter-rouge&quot;&gt;./gulp/tasks/nameOfTask.task.js&lt;/code&gt; is built up using the &lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; module pattern, returing the task stream. Returning the task stream is important as it allows Gulp to signal async task completion. With task configuration from withing the &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp.config.js&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * Gulp Task for doing XYZ
 * @param {gulp} gulp - The gulp module passed in
 * @param {config} config - The projects Gulp config file
 * @param {argv} argv - Arguments flagged at the CLI
 * @param {$} $ - Lazy load plugins, save the imports at the start of the file
 * @return {stream} Stream - Task stream to manage XYZ in project
 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// XYZ source files&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Apply special Gulp source&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;specialsource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;specialsource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Write stream to destination folder&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;just-show-me-the-repository-already&quot;&gt;5 - Just Show Me the Repository Already&lt;/h2&gt;
&lt;p&gt;If you would like to see it in action, check out the repositry for this website at &lt;a href=&quot;https://github.com/IanTeda/IanTeda.github.io&quot;&gt;https://github.com/IanTeda/IanTeda.github.io&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h5&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:using-es6-with-gulp&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://markgoodyear.com/2015/06/using-es6-with-gulp/&quot;&gt;Using ES6 with gulp&lt;/a&gt; &lt;a href=&quot;#fnref:using-es6-with-gulp&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:node-command-args&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://reverentgeek.com/ahoy-parse-ye-node-js-command-args-with-yargs/&quot;&gt;Parse ye Node.js command args with yargs!&lt;/a&gt; &lt;a href=&quot;#fnref:node-command-args&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:module-gulp-tasks&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://macr.ae/article/splitting-gulpfile-multiple-files.html&quot;&gt;Splitting a gulpfile into multiple files&lt;/a&gt; &lt;a href=&quot;#fnref:module-gulp-tasks&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><category term="programming" /><category term="gulp" /><category term="jekyll" /><category term="workflow" /><category term="design pattern" /><summary>Always start with the end in mind. So you know what direction to travel
 — Ian Teda 


Keeping the end in mind, I listed four design criteria (patterns) to target when writting Gulp tasks. I wanted my workflow to be modern, simple, configurable and modulised.

Design Criteria/Patterns


  Use ES2015, ECMAScript 2015 (modern): Why? Get accustom to new JavaScript features before they become mainstream.
  Command Line Interface (simple): Why? KISS. Keep It Simple Stupid. A good design is a simple yet functional design.
  Configuration File (configurable): Why? Make changes in one place, watch them permiate. Easier to read and maintain code.
  Modulised Gulp tasks: Why? Makes for more readable, easier to reuse and maintainable code.


1 - Use ES2015 with Gulp

To paraphrase the Babel tagline. Use next generation JavaScript, today with Babel. Since the release of Gulp (gulp-cli) version +3.9 gulp -v it is as easy as 1-2-3 to use ES2015 while writting Gulp tasks 1.

To get babel plugged into Gulp I used the following 3 steps:

1 - Install npm packages for Babel and babel presents

npm install babel-core babel-preset-es2015 --save-dev



2 - Create a .babelrc file to enable 2015 presets

{
  &quot;presets&quot;: [&quot;es2015&quot;]
}



3 - Rename gulpfile.js to gulpfile.babel.js

Done. See, as easy as 1-2-3.

2 - Command Line Interface with Yargs

Paraphrasing the Yargs tagline. Build interactive command line tools by parsing arguments and generating an elegant user interface. Keeping with my design criteria, I refractored the Yargs configuration into a seperate config file yargs.config.js. Which is then required from within the gulpfile.babel.js. Keeping things neat and tidy.

Require Yargs configuration file within gulpfile.babel.js.

// Command line (CLI) argument
var argv = require(&quot;./gulp/yargs.config&quot;);



Setup the user interface and configure the CLI arguments yargs.config.js 2.

/**
 * CLI (YARGS) Configuration
 * @param {yargs} yargs - Module for handling CLI arguments
 * @exports {argv} argv - Argument object
 */
module.exports = require(&quot;yargs&quot;)
  .usage(&quot;Usage: Gulp &amp;lt;task&amp;gt; [-p -prod -production]&quot;)
  .command(&quot;script&quot;, &quot;Run script tasks&quot;, {alias: &quot;scripts&quot;})
  .boolean(&quot;production&quot;)
  .alias(&quot;production&quot;, [&quot;p&quot;, &quot;prod&quot;])
  .describe(&quot;production&quot;, &quot;Run Gulp tasks in production mode&quot;)
  .help(&quot;help&quot;)
  .alias(&quot;help&quot;, &quot;?&quot;)
  .argv;



3 - Gulp Configuration File

Make changes in one place, watch them permiate. Which equals easier to read and maintain code.

gulp.babel.js

// Configuration file for gulp tasks
const config = require(&quot;./gulp/gulp.config&quot;);



gulp.config.js

module.exports = {
  xyz: {
    src: &quot;src/xyz.xyz&quot;,
    options: {
      a: true,
      b: false 
    },
    dest: &quot;src/&quot;
  }
}



4 - Modulise Gulp Tasks

Modulisation of Gulp tasks makes for more readable, easier to reuse and maintain code.

Always abstract anything you need to do more than once. With that in mind a requireTask function is used to require task files from within gulp.babel.js. 3

// Import Gulp module
import gulp from &quot;gulp&quot;;
// Command line (CLI) argument
var argv = require(&quot;./gulp/yargs.config&quot;);
// Configuration file for gulp tasks
const config = require(&quot;./gulp/gulp.config&quot;);
// Lazy load plugins, makes for neater source code
var plugins = require(&quot;gulp-load-plugins&quot;)(config.gulpLoadPlugins.options);

/**
 * Require Gulp Task
 * @param {task} task - What Gulp task do you require
 * @return {function} function - Returns task function from module export
 */
function requireTask(task) {
  // Require Gulp task module, passing in Gulp, config, argv and plugin object references
  return require(&quot;./gulp/tasks/&quot; + task + &quot;.task.js&quot;)(
    gulp,
    config,
    argv,
    plugins
  );
}

gulp.task(&quot;scripts:build&quot;, requireTask(&quot;nameOfTask&quot;));



The task ./gulp/tasks/nameOfTask.task.js is built up using the NodeJS module pattern, returing the task stream. Returning the task stream is important as it allows Gulp to signal async task completion. With task configuration from withing the gulp.config.js file.

&quot;use strict&quot;;
/**
 * Gulp Task for doing XYZ
 * @param {gulp} gulp - The gulp module passed in
 * @param {config} config - The projects Gulp config file
 * @param {argv} argv - Arguments flagged at the CLI
 * @param {$} $ - Lazy load plugins, save the imports at the start of the file
 * @return {stream} Stream - Task stream to manage XYZ in project
 */
module.exports = (gulp, config, argv, $) =&amp;gt; {
  return function() {
    var stream = gulp
      // XYZ source files
      .src(config.xyz.src)
      // Apply special Gulp source
      .pipe($.if(
        !argv.prod,
        $.specialsource(config.specialsource.options
      )
      // Write stream to destination folder
      .pipe(gulp.dest(config.xyz.dest));
      
    return stream;
  };
};



5 - Just Show Me the Repository Already
If you would like to see it in action, check out the repositry for this website at https://github.com/IanTeda/IanTeda.github.io

Footnotes

  
    
      Using ES6 with gulp &amp;#8617;
    
    
      Parse ye Node.js command args with yargs! &amp;#8617;
    
    
      Splitting a gulpfile into multiple files &amp;#8617;</summary></entry><entry><title>The Gulp, Jekyll, Github Pages &amp;amp; Cloudflare Mixture</title><link href="https://ianteda.com/programming/the-gulp-jekyll-github-pages-cloudflare-mixture.html" rel="alternate" type="text/html" title="The Gulp, Jekyll, Github Pages &amp; Cloudflare Mixture" /><published>2016-03-15T00:00:00+11:00</published><updated>2016-03-15T00:00:00+11:00</updated><id>https://ianteda.com/programming/the-gulp-jekyll-github-pages-cloudflare-mixture</id><content type="html" xml:base="https://ianteda.com/programming/the-gulp-jekyll-github-pages-cloudflare-mixture.html">&lt;blockquote&gt;
  &lt;p&gt;Flexible, simple, fast, secure &amp;amp; https. Total cost, $15AUD for domain registration.&lt;br /&gt;
&lt;cite&gt; — Ian Teda &lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Web technologies for development hosting and security are vast. With proponents singing their own praises. At the start of my &lt;a href=&quot;https://ianteda.com&quot;&gt;ianteda.com&lt;/a&gt; project &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; I looked around at the options.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wordpress.org/&quot; target=&quot;_blank&quot;&gt;Wordpress&lt;/a&gt; serves up over 26%&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; of the internet. Been there done that, so I crossed it off the list &lt;i class=&quot;fa fa-times&quot;&gt;&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;I almost settled on &lt;a href=&quot;https://ghost.org/&quot; target=&quot;_blank&quot;&gt;Ghost&lt;/a&gt;. The idea of playing around with &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt; tickled my fancy. But I balked at the hosting options, which cost money and are few. Hosting with &lt;a href=&quot;https://www.digitalocean.com/&quot; target=&quot;_blank&quot;&gt;DigitalOcean&lt;/a&gt; almost swayed me. Self hosting &lt;a href=&quot;https://ghost.org/&quot; target=&quot;_blank&quot;&gt;Ghost&lt;/a&gt; was a cheaper option, but both would require what time I have keeping the server up and current instead of creating content. So I cross Ghost off the list &lt;i class=&quot;fa fa-times&quot;&gt;&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;In the end, the technology stack I chose for my &lt;a href=&quot;https://en.wikipedia.org/wiki/Quiver&quot; target=&quot;_blank&quot;&gt;quiver&lt;/a&gt; includes &lt;a href=&quot;http://gulpjs.com/&quot; target=&quot;_blank&quot;&gt;Gulp&lt;/a&gt; for development, &lt;a href=&quot;http://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; as the web platform, &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot;&gt;Github Pages&lt;/a&gt; for the hosting, and &lt;a href=&quot;https://www.cloudflare.com/&quot; target=&quot;_blank&quot;&gt;Cloudfare&lt;/a&gt; for CDN and HTTPS. Total cost, $15AUD for domain registration. Tick &lt;i class=&quot;fa fa-check&quot;&gt;&lt;/i&gt;.&lt;/p&gt;

&lt;h2 id=&quot;gulphttpgulpjscom-development&quot;&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; (Development)&lt;/h2&gt;
&lt;p&gt;Jekyll comes with tooling out of the box to help with development, such as server reload on file change and SASS transpiling. But I wanted more flexibility (options) with my development workflow, so I piped in Gulp (did you see what I did there, Gulp joke). Using Gulp opened up my workflow to the Gulp &lt;a href=&quot;http://gulpjs.com/plugins/&quot; target=&quot;_blank&quot;&gt;ecosystem&lt;/a&gt; and 2,251 plugins in it.&lt;/p&gt;

&lt;p&gt;Below is a list of the plugins in alphabetical order that I use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/autoprefixer&quot; target=&quot;_blank&quot;&gt;autoprefixer&lt;/a&gt;: Write cleaner CSS by adding vender prefixes postCSS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/browser-sync&quot; target=&quot;_blank&quot;&gt;Browsersync&lt;/a&gt;: Live reload CSS and keep multiple browsers &amp;amp; devices in sync&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-concat/&quot; target=&quot;_blank&quot;&gt;Concat&lt;/a&gt;: Join multiple files into one CSS &amp;amp; JavaScript&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/css-mqpacker&quot; target=&quot;_blank&quot;&gt;css-mqpacker&lt;/a&gt;: Pack the same CSS media query rules into one media query rule postCSS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/csswring&quot; target=&quot;_blank&quot;&gt;csswring&lt;/a&gt;: Delete unneed characters in my CSS file with source maps postCSS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-eslint/&quot; target=&quot;_blank&quot;&gt;eslint&lt;/a&gt;: Lint my JavaScript&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/eslint-config-google&quot; target=&quot;_blank&quot;&gt;eslint-config-google&lt;/a&gt;: Lint my JavaScript using the Google style guide&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-gh-pages/&quot; target=&quot;_blank&quot;&gt;gh-pages&lt;/a&gt;: Publish the website build to Github Pages&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-gzip/&quot; target=&quot;_blank&quot;&gt;Gzip&lt;/a&gt;: Compress the deployed files to reduce load time – i.e. html and JavaScript&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-htmlmin/&quot; target=&quot;_blank&quot;&gt;htmlmin&lt;/a&gt;: Delete unneeded characters in my html&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-imagemin/&quot; target=&quot;_blank&quot;&gt;Imagemin&lt;/a&gt;: Minify my PNG, JPEG, GIF and SVG images. I have some problems with this one.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-inject/&quot; target=&quot;_blank&quot;&gt;Inject&lt;/a&gt;: Inject dynamic CSS and JavaScript file references into the html header and footer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-postcss/&quot; target=&quot;_blank&quot;&gt;postCSS&lt;/a&gt;: Transform CSS styles with JavaScript plugins&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/gulp-sass/&quot; target=&quot;_blank&quot;&gt;SASS&lt;/a&gt;: Transpile SASS into CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jekyllhttpjekyllrbcomtargetblank-website&quot;&gt;&lt;a href=&quot;http://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; (Website)&lt;/h3&gt;
&lt;p&gt;I decided to use Jekyll when it dawned on me that to have a fast content management system (CMS) it needs a cache system. And what is a cache system? A static webpage generator - aka Jekyll. Since I don’t need access for multiple authors – which could still be done with Jekyll and Github, but would require more technical knowledge from the author – lets skip the whole database thing and go straight to generating the webpages on my local machine and uploading the build.&lt;/p&gt;

&lt;p&gt;By removing the database I reduced my cyber attack profile – no database calls – and simplifies hosting requirements. Opening up cheaper hosting options.&lt;/p&gt;

&lt;p&gt;Jekyll is easy to setup on Mac and Linux machines but is a little bit more work on Windows&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;github-pageshttpjekyllrbcom-hosting&quot;&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Github Pages&lt;/a&gt; (Hosting)&lt;/h3&gt;
&lt;p&gt;Jekyll was written by &lt;a href=&quot;https://en.wikipedia.org/wiki/Tom_Preston-Werner&quot; target=&quot;_blank&quot;&gt;Tom Preston-Werner&lt;/a&gt;, the co-founder of Github. So it isn’t surprising that Github supports hosting of Jekyll websites – known as &lt;a href=&quot;https://pages.github.com&quot; target=&quot;_blank&quot;&gt;Github Pages&lt;/a&gt;, which removes the need to generate webpages locally. However, Github Pages only allows a few Jekyll Gems (plugins) to run on their server. So I decided to develop locally and upload the build to GitHub Pages. I can do what ever I like now, it is my machine.&lt;/p&gt;

&lt;p&gt;GitHub Pages also offers CDN and domain redirects&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, meaning speed and your own domain name. On top of all that the price is right, free.&lt;/p&gt;

&lt;h3 id=&quot;cloudfarehttpswwwcloudflarecomtargetblank-httpscdn&quot;&gt;&lt;a href=&quot;https://www.cloudflare.com/&quot; target=&quot;_blank&quot;&gt;Cloudfare&lt;/a&gt; (HTTPS/CDN)&lt;/h3&gt;
&lt;p&gt;Cloudfare makes your website faster and safer by offering DOS protection, shared SSL and CDN cache. They believe so deeply about a secure internet, they have a free tier plan&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. Tick, tick and tick. They use a Universal SSL to secure the connection between your users and CloudFlare&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;. Giving your website a https address.&lt;/p&gt;

&lt;p&gt;I used the linked guide for setting up my Jekyll / GitHub website with Clodflare&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h5 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h5&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/IanTeda/IanTeda.github.io&quot; target=&quot;_blank&quot;&gt;GitHub Repository for ianteda.com source code&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://w3techs.com/technologies/overview/content_management/all&quot; target=&quot;_blank&quot;&gt;Usage of content management systems for websites&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://jekyll-windows.juthilo.com/&quot; target=&quot;_blank&quot;&gt;Setting up Jekyll on Windows&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&quot; target=&quot;_blank&quot;&gt;Set up subdomain Github&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com/plans/&quot; target=&quot;_blank&quot;&gt;CloudFlare Plans&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com/ssl/&quot; target=&quot;_blank&quot;&gt;CloudFlare one-click SSL&lt;/a&gt; &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://sheharyar.me/blog/free-ssl-for-github-pages-with-custom-domains/&quot; target=&quot;_blank&quot;&gt;Free SSL for GitHub Pages with Custom Domains&lt;/a&gt; &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><category term="programming" /><category term="Gulp" /><category term="Jekyll" /><category term="Github" /><category term="Github Pages" /><category term="Cloudflare" /><summary>Flexible, simple, fast, secure &amp;amp; https. Total cost, $15AUD for domain registration.
 — Ian Teda 


Web technologies for development hosting and security are vast. With proponents singing their own praises. At the start of my ianteda.com project 1 I looked around at the options.

Wordpress serves up over 26%2 of the internet. Been there done that, so I crossed it off the list .

I almost settled on Ghost. The idea of playing around with Node.js tickled my fancy. But I balked at the hosting options, which cost money and are few. Hosting with DigitalOcean almost swayed me. Self hosting Ghost was a cheaper option, but both would require what time I have keeping the server up and current instead of creating content. So I cross Ghost off the list .

In the end, the technology stack I chose for my quiver includes Gulp for development, Jekyll as the web platform, Github Pages for the hosting, and Cloudfare for CDN and HTTPS. Total cost, $15AUD for domain registration. Tick .

Gulp (Development)
Jekyll comes with tooling out of the box to help with development, such as server reload on file change and SASS transpiling. But I wanted more flexibility (options) with my development workflow, so I piped in Gulp (did you see what I did there, Gulp joke). Using Gulp opened up my workflow to the Gulp ecosystem and 2,251 plugins in it.

Below is a list of the plugins in alphabetical order that I use:


  autoprefixer: Write cleaner CSS by adding vender prefixes postCSS
  Browsersync: Live reload CSS and keep multiple browsers &amp;amp; devices in sync
  Concat: Join multiple files into one CSS &amp;amp; JavaScript
  css-mqpacker: Pack the same CSS media query rules into one media query rule postCSS
  csswring: Delete unneed characters in my CSS file with source maps postCSS
  eslint: Lint my JavaScript
  eslint-config-google: Lint my JavaScript using the Google style guide
  gh-pages: Publish the website build to Github Pages
  Gzip: Compress the deployed files to reduce load time – i.e. html and JavaScript
  htmlmin: Delete unneeded characters in my html
  Imagemin: Minify my PNG, JPEG, GIF and SVG images. I have some problems with this one.
  Inject: Inject dynamic CSS and JavaScript file references into the html header and footer
  postCSS: Transform CSS styles with JavaScript plugins
  SASS: Transpile SASS into CSS


Jekyll (Website)
I decided to use Jekyll when it dawned on me that to have a fast content management system (CMS) it needs a cache system. And what is a cache system? A static webpage generator - aka Jekyll. Since I don’t need access for multiple authors – which could still be done with Jekyll and Github, but would require more technical knowledge from the author – lets skip the whole database thing and go straight to generating the webpages on my local machine and uploading the build.

By removing the database I reduced my cyber attack profile – no database calls – and simplifies hosting requirements. Opening up cheaper hosting options.

Jekyll is easy to setup on Mac and Linux machines but is a little bit more work on Windows3

Github Pages (Hosting)
Jekyll was written by Tom Preston-Werner, the co-founder of Github. So it isn’t surprising that Github supports hosting of Jekyll websites – known as Github Pages, which removes the need to generate webpages locally. However, Github Pages only allows a few Jekyll Gems (plugins) to run on their server. So I decided to develop locally and upload the build to GitHub Pages. I can do what ever I like now, it is my machine.

GitHub Pages also offers CDN and domain redirects4, meaning speed and your own domain name. On top of all that the price is right, free.

Cloudfare (HTTPS/CDN)
Cloudfare makes your website faster and safer by offering DOS protection, shared SSL and CDN cache. They believe so deeply about a secure internet, they have a free tier plan5. Tick, tick and tick. They use a Universal SSL to secure the connection between your users and CloudFlare6. Giving your website a https address.

I used the linked guide for setting up my Jekyll / GitHub website with Clodflare7.

Footnotes


  
    
      GitHub Repository for ianteda.com source code &amp;#8617;
    
    
      Usage of content management systems for websites &amp;#8617;
    
    
      Setting up Jekyll on Windows &amp;#8617;
    
    
      Set up subdomain Github &amp;#8617;
    
    
      CloudFlare Plans &amp;#8617;
    
    
      CloudFlare one-click SSL &amp;#8617;
    
    
      Free SSL for GitHub Pages with Custom Domains &amp;#8617;</summary></entry><entry><title>Video - The Cotter Dam Intake Tower Explanation</title><link href="https://ianteda.com/engineering/the-cotter-dam-intake-tower-explanation.html" rel="alternate" type="text/html" title="Video - The Cotter Dam Intake Tower Explanation" /><published>2016-03-02T00:00:00+11:00</published><updated>2016-03-02T00:00:00+11:00</updated><id>https://ianteda.com/engineering/the-cotter-dam-intake-tower-explanation</id><content type="html" xml:base="https://ianteda.com/engineering/the-cotter-dam-intake-tower-explanation.html">&lt;p&gt;A short video featuring yours truly, and the construction of the intake tower on the Cotter Dam project.&lt;/p&gt;

&lt;div class=&quot;video-wrapper&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6MZ0eRckO34&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Video &amp;amp; Cover Image Credit: &lt;a href=&quot;https://www.iconwater.com.au/&quot; target=&quot;_blank&quot;&gt;Icon Water&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://www.richardsnashall.net/&quot; target=&quot;_blank&quot;&gt;Richard Snashall&lt;/a&gt;&lt;/p&gt;</content><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><category term="engineering" /><category term="Dams" /><summary>A short video featuring yours truly, and the construction of the intake tower on the Cotter Dam project.


  


Video &amp;amp; Cover Image Credit: Icon Water &amp;amp; Richard Snashall</summary></entry><entry><title>The Idea Value Proposition</title><link href="https://ianteda.com/management/the-idea-value-proposition.html" rel="alternate" type="text/html" title="The Idea Value Proposition" /><published>2016-02-26T00:00:00+11:00</published><updated>2016-02-26T00:00:00+11:00</updated><id>https://ianteda.com/management/the-idea-value-proposition</id><content type="html" xml:base="https://ianteda.com/management/the-idea-value-proposition.html">&lt;blockquote&gt;
  &lt;p&gt;“Daring ideas are like chessmen moved forward. They may be beaten, but they may start a winning game.”
&lt;cite&gt; – Johann Wolfgang von Goethe&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ideas are easy, cheap even. It is the execution that is hard and because it is hard it is worth millions. If the execution wasn’t hard everyone would be doing it. And if everyone was doing it, then it would be worthless and quickly become a race to the bottom.&lt;/p&gt;

&lt;p&gt;It is important to realise that an idea is not a product or a business&lt;sup id=&quot;fnref:not-a-business&quot;&gt;&lt;a href=&quot;#fn:not-a-business&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. A product, is an idea that is – or multiple ideas that are – executed well.  But ideas still hold value. Ideas are a multiplier of the execution, that together produce value. Thus, a good idea produces more value than a bad idea when multiplied by the same execution&lt;sup id=&quot;fnref:sivers&quot;&gt;&lt;a href=&quot;#fn:sivers&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-proposition&quot;&gt;The Proposition&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;// The Value Proposition
Product Value = Idea x Execution

// Bad Idea Multiplier
Product Value = 1 x 100,000 = 100,000 of Value

// Good Idea Multiplier
Product Value = 10 x 100,000 = 1,000,000 of Value

// Awful Idea Multiplier
Product Value = -1 x 100,000 = -100,000 of Value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The better an idea the more it will multiple the execution and the value of the product.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Genius is one percent inspiration, ninety-nine percent perspiration.
&lt;cite&gt; – Thomas Edison&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have an original, totally awesome idea it will not take long before someone else copies it. After all it is an awesome idea. Success therefore doesn’t come from the idea but the execution. How the idea is implemented, branded, marketed, positioned and finally sold.&lt;/p&gt;

&lt;p&gt;With the multiplier in mind, you don’t need an original idea for success. Google wasn’t the first search engine, Facebook wasn’t the first social platform and the iPod wasn’t the first music player&lt;sup id=&quot;fnref:not-a-business:1&quot;&gt;&lt;a href=&quot;#fn:not-a-business&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. What differentiated them and made them “successful” was the execution of the idea.&lt;/p&gt;

&lt;p&gt;What makes a bad idea? It’s hard to say. A bad idea can disguise itself as a good idea executed poorly. All the time you are thinking “I just need to persist and execute better”. You end up burning energy pushing and a bad idea uphill. It is important therefor to validate ideas (a topic for another post) before execution.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Ideas are a dime a dozen. People who implement them are priceless.”
&lt;cite&gt; – Mary Kay Ash&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So don’t burn energy protecting and worrying someone will steal your idea, they will. Put your focus into idea generation and valuation. But mostly idea execution. Because, “great ideas are useless without someone full of passion to implement them.” – Amy Rees Anderson&lt;sup id=&quot;fnref:dim-dozen&quot;&gt;&lt;a href=&quot;#fn:dim-dozen&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes:&lt;/h3&gt;

&lt;p&gt;Photo cover credit: &lt;a href=&quot;https://www.flickr.com/photos/larrymyhre/23648279433/&quot; target=&quot;_blank&quot;&gt;Larry Myhre&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:not-a-business&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://medium.com/the-1-blog-series/ideas-are-cheap-execution-is-worth-millions-e203efbcaa49#.u9b3zzspk&quot; target=&quot;_blank&quot;&gt;Ideas Are Cheap, Execution is Worth Millions – Sathyvelu Kunashegaran&lt;/a&gt; &lt;a href=&quot;#fnref:not-a-business&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:not-a-business:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sivers&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://sivers.org/multiply&quot; target=&quot;_blank&quot;&gt;Ideas are just a multiplier of execution – Derek Sivers&lt;/a&gt; &lt;a href=&quot;#fnref:sivers&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:dim-dozen&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.forbes.com/sites/amyanderson/2013/03/14/ideas-are-a-dime-a-dozen-people-who-implement-them-are-priceless/#57e07877304b&quot; target=&quot;_blank&quot;&gt;Ideas are a Dime a Dozen&lt;/a&gt; &lt;a href=&quot;#fnref:dim-dozen&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><category term="management" /><category term="Entrepreneurial" /><summary>“Daring ideas are like chessmen moved forward. They may be beaten, but they may start a winning game.”
 – Johann Wolfgang von Goethe


Ideas are easy, cheap even. It is the execution that is hard and because it is hard it is worth millions. If the execution wasn’t hard everyone would be doing it. And if everyone was doing it, then it would be worthless and quickly become a race to the bottom.

It is important to realise that an idea is not a product or a business1. A product, is an idea that is – or multiple ideas that are – executed well.  But ideas still hold value. Ideas are a multiplier of the execution, that together produce value. Thus, a good idea produces more value than a bad idea when multiplied by the same execution2.

The Proposition

// The Value Proposition
Product Value = Idea x Execution

// Bad Idea Multiplier
Product Value = 1 x 100,000 = 100,000 of Value

// Good Idea Multiplier
Product Value = 10 x 100,000 = 1,000,000 of Value

// Awful Idea Multiplier
Product Value = -1 x 100,000 = -100,000 of Value


The better an idea the more it will multiple the execution and the value of the product.


  Genius is one percent inspiration, ninety-nine percent perspiration.
 – Thomas Edison


If you have an original, totally awesome idea it will not take long before someone else copies it. After all it is an awesome idea. Success therefore doesn’t come from the idea but the execution. How the idea is implemented, branded, marketed, positioned and finally sold.

With the multiplier in mind, you don’t need an original idea for success. Google wasn’t the first search engine, Facebook wasn’t the first social platform and the iPod wasn’t the first music player1. What differentiated them and made them “successful” was the execution of the idea.

What makes a bad idea? It’s hard to say. A bad idea can disguise itself as a good idea executed poorly. All the time you are thinking “I just need to persist and execute better”. You end up burning energy pushing and a bad idea uphill. It is important therefor to validate ideas (a topic for another post) before execution.


  “Ideas are a dime a dozen. People who implement them are priceless.”
 – Mary Kay Ash


So don’t burn energy protecting and worrying someone will steal your idea, they will. Put your focus into idea generation and valuation. But mostly idea execution. Because, “great ideas are useless without someone full of passion to implement them.” – Amy Rees Anderson3

Footnotes:

Photo cover credit: Larry Myhre

  
    
      Ideas Are Cheap, Execution is Worth Millions – Sathyvelu Kunashegaran &amp;#8617; &amp;#8617;2
    
    
      Ideas are just a multiplier of execution – Derek Sivers &amp;#8617;
    
    
      Ideas are a Dime a Dozen &amp;#8617;</summary></entry><entry><title>The Bold Mistake Instruction</title><link href="https://ianteda.com/creativity/the-bold-mistake-instruction.html" rel="alternate" type="text/html" title="The Bold Mistake Instruction" /><published>2016-02-19T00:00:00+11:00</published><updated>2016-02-19T00:00:00+11:00</updated><id>https://ianteda.com/creativity/the-bold-mistake-instruction</id><content type="html" xml:base="https://ianteda.com/creativity/the-bold-mistake-instruction.html">&lt;blockquote&gt;
  &lt;p&gt;All courses of action are risky, so prudence is not in avoiding danger (it’s impossible), but calculating risk and acting decisively. Make mistakes of ambition and not mistakes of sloth. Develop the strength to do bold things, not the strength to suffer.
&lt;cite&gt;– Chapter III: Of Mixed Princedoms&lt;sup id=&quot;fnref:footnote&quot;&gt;&lt;a href=&quot;#fn:footnote&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/9176370534/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=9176370534&amp;amp;linkCode=as2&amp;amp;tag=iate-20&amp;amp;linkId=BS2U6JP2MFM3IICC&quot;&gt;&lt;img src=&quot;/assets/images/book-the-prince.jpg&quot; alt=&quot;The Prince - Book Cover&quot; title=&quot;The Prince - Book Cover&quot; class=&quot;book-cover&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Life is risk, it cannot be avoided so do not let the possibility of being wrong prevent action. An indecision is still a decision. Move forward knowing that the decision you made was the right one, based on the knowledge you had at the time. Whether or not it turns out right is besides the point, considered action is.&lt;/p&gt;

&lt;p&gt;Becoming successful requires risk and with risk comes mistakes. It is through these mistakes that we learn and grow. We can try to avoid risk but in the end we will make mistakes. However, there are mistakes of sloth and mistakes of ambition. Mistake of sloth lead to missed opportunity and regret. While, mistakes of ambition will be forgiven because they come from good intentions. Mistakes of sloth are not so easily forgiven and often it is ourselves that are the last to forget because regret lives on.&lt;/p&gt;

&lt;p&gt;Success for the most part is subjective. Whatever your measure, it still requires action. The path of least resistance is easy because it is well-worn. Be bold, walk the road less traveled and live a life without regrets and full of mistakes.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:footnote&quot;&gt;
      &lt;p&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.amazon.com/gp/product/0486272745/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0486272745&amp;amp;linkCode=as2&amp;amp;tag=iate-20&amp;amp;linkId=XF6OTL2R2FAENV6H&quot;&gt;The Prince&lt;/a&gt; by Niccolò Machiavelli. Written in the 16th century, it is about acquiring power and maintaining it (pre democracy). &lt;a href=&quot;#fnref:footnote&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Ian Teda</name><email>ian@teda.id.au</email></author><category term="creativity" /><category term="Philosophy" /><summary>All courses of action are risky, so prudence is not in avoiding danger (it’s impossible), but calculating risk and acting decisively. Make mistakes of ambition and not mistakes of sloth. Develop the strength to do bold things, not the strength to suffer.
– Chapter III: Of Mixed Princedoms1




Life is risk, it cannot be avoided so do not let the possibility of being wrong prevent action. An indecision is still a decision. Move forward knowing that the decision you made was the right one, based on the knowledge you had at the time. Whether or not it turns out right is besides the point, considered action is.

Becoming successful requires risk and with risk comes mistakes. It is through these mistakes that we learn and grow. We can try to avoid risk but in the end we will make mistakes. However, there are mistakes of sloth and mistakes of ambition. Mistake of sloth lead to missed opportunity and regret. While, mistakes of ambition will be forgiven because they come from good intentions. Mistakes of sloth are not so easily forgiven and often it is ourselves that are the last to forget because regret lives on.

Success for the most part is subjective. Whatever your measure, it still requires action. The path of least resistance is easy because it is well-worn. Be bold, walk the road less traveled and live a life without regrets and full of mistakes.


  
    
      The Prince by Niccolò Machiavelli. Written in the 16th century, it is about acquiring power and maintaining it (pre democracy). &amp;#8617;</summary></entry></feed>
